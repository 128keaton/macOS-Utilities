// Generated by Apple Swift version 5.3 (swiftlang-1200.0.16.9 clang-1200.0.22.5)
#ifndef AUDIOKIT_SWIFT_H
#define AUDIOKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import Accelerate;
@import AudioToolbox;
@import CoreMIDI;
@import Foundation;
@import ObjectiveC;
#endif

#import <AudioKit/AudioKit.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AudioKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Parent class for all nodes in AudioKit
SWIFT_CLASS("_TtC8AudioKit6AKNode")
@interface AKNode : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 3-D Spatialization of the input
SWIFT_CLASS("_TtC8AudioKit10AK3DPanner")
@interface AK3DPanner : AKNode
/// Position of sound source along x-axis
@property (nonatomic) AUValue x;
/// Position of sound source along y-axis
@property (nonatomic) AUValue y;
/// Position of sound source along z-axis
@property (nonatomic) AUValue z;
/// Initialize the panner node
/// \param input Node to pan in 3D Space
///
/// \param x x-axis location in meters
///
/// \param y y-axis location in meters
///
/// \param z z-axis location in meters
///
- (nonnull instancetype)init:(AKNode * _Nullable)input x:(AUValue)x y:(AUValue)y z:(AUValue)z OBJC_DESIGNATED_INITIALIZER;
@end

@class AKFader;

/// Psuedo abstract base class for players that wish to use AKFader based automation.
SWIFT_CLASS("_TtC8AudioKit16AKAbstractPlayer")
@interface AKAbstractPlayer : AKNode
/// The underlying gain booster and main output which controls fades as well.
@property (nonatomic, strong) AKFader * _Nullable faderNode;
/// Amplification Factor, in the range of 0 to 2
@property (nonatomic) AUValue gain;
/// Get or set the start time of the player.
@property (nonatomic) double startTime;
/// Get or set the end time of the player.
@property (nonatomic) double endTime;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic) BOOL isLooping;
/// true if the player has any fades, in or out∆í
@property (nonatomic, readonly) BOOL isFaded;
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) double sampleRate;
- (void)play;
- (void)stop;
@end


/// Triggerable classic ADSR envelope
SWIFT_CLASS("_TtC8AudioKit19AKAmplitudeEnvelope")
@interface AKAmplitudeEnvelope : AKNode
@end

@class AUAudioUnitBusArray;
@class AUParameterTree;

SWIFT_CLASS("_TtC8AudioKit15AKAudioUnitBase")
@interface AKAudioUnitBase : AUAudioUnit
- (BOOL)allocateRenderResourcesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)deallocateRenderResources;
- (void)reset;
@property (nonatomic, readonly, strong) AUAudioUnitBusArray * _Nonnull inputBusses;
@property (nonatomic, readonly, strong) AUAudioUnitBusArray * _Nonnull outputBusses;
@property (nonatomic, readonly, copy) AUInternalRenderBlock _Nonnull internalRenderBlock;
@property (nonatomic, strong) AUParameterTree * _Nullable parameterTree;
@property (nonatomic, readonly) BOOL canProcessInPlace;
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AudioKit28AKAmplitudeEnvelopeAudioUnit")
@interface AKAmplitudeEnvelopeAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Performs a ‚Äúroot-mean-square‚Äù on a signal to get overall amplitude of a
/// signal. The output signal looks similar to that of a classic VU meter.
SWIFT_CLASS("_TtC8AudioKit18AKAmplitudeTracker")
@interface AKAmplitudeTracker : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Detected amplitude
@property (nonatomic, readonly) AUValue amplitude;
/// Detected amplitude
@property (nonatomic, readonly) AUValue leftAmplitude;
/// Detected right amplitude
@property (nonatomic, readonly) AUValue rightAmplitude;
/// Threshold amplitude
@property (nonatomic) AUValue threshold;
/// Initialize this amplitude tracker node
/// \param input Input node to process
///
/// \param halfPowerPoint Half-power point (in Hz) of internal lowpass filter.
///
/// \param threshold point at which the callback is called
///
/// \param thresholdCallback function to execute when the threshold is reached
///
- (nonnull instancetype)init:(AKNode * _Nullable)input halfPowerPoint:(AUValue)halfPowerPoint threshold:(AUValue)threshold thresholdCallback:(void (^ _Nonnull)(BOOL))thresholdCallback OBJC_DESIGNATED_INITIALIZER;
@end

@class AVAudioUnitSampler;
@class AKAudioFile;

/// Sampler audio generation.
/// <ol>
///   <li>
///     init the audio unit like this: var sampler = AKAppleSampler()
///   </li>
///   <li>
///     load a sound a file: sampler.loadWav(‚Äúpath/to/your/sound/file/in/app/bundle‚Äù) (without wav extension)
///   </li>
///   <li>
///     connect to the engine: AKManager.output = sampler
///   </li>
///   <li>
///     start the engine AKManager.start()
///   </li>
/// </ol>
SWIFT_CLASS("_TtC8AudioKit14AKAppleSampler")
@interface AKAppleSampler : AKNode
/// Sampler AV Audio Unit
@property (nonatomic, strong) AVAudioUnitSampler * _Nonnull samplerUnit;
/// Tuning amount in semitones, from -24.0 to 24.0, Default: 0.0
/// Doesn‚Äôt transpose by playing another note (and the accoring zone and layer)
/// but bends the sound up and down like tuning.
@property (nonatomic) AUValue tuning;
/// Load a wav file
/// \param file Name of the file without an extension (assumed to be accessible from the bundle)
///
- (BOOL)loadWav:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an EXS24 sample data file
/// \param file Name of the EXS24 file without the .exs extension
///
- (BOOL)loadEXS24:(NSString * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an AKAudioFile
/// \param file an AKAudioFile
///
- (BOOL)loadAudioFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Load an array of AKAudioFiles
/// If a file name ends with a note name (ex: ‚ÄúviolinC3.wav‚Äù)
/// The file will be set to this note
/// Handy to set multi-sampled instruments or a drum kit‚Ä¶
/// \param files An array of AKAudioFiles
///
- (BOOL)loadAudioFiles:(NSArray<AKAudioFile *> * _Nonnull)files error:(NSError * _Nullable * _Nullable)error;
/// Load a file path. The sampler can be configured by loading
/// instruments from different types of files such as an aupreset, a DLS or SF2 sound bank,
/// an EXS24 instrument, a single audio file, or an array of audio files.
/// \param filePath Name of the file with the extension
///
- (BOOL)loadPath:(NSString * _Nonnull)filePath error:(NSError * _Nullable * _Nullable)error;
/// Output Amplitude. Range: -90.0 -> +12 db, Default: 0 db
@property (nonatomic) AUValue amplitude;
/// Normalized Output Volume. Range: 0 -> 1, Default: 1
@property (nonatomic) AUValue volume;
/// Pan. Range: -1 -> 1, Default: 0
@property (nonatomic) AUValue pan;
/// Play a MIDI Note or trigger a sample
/// NB: when using an audio file, noteNumber 60 will play back the file at normal
/// speed, 72 will play back at double speed (1 octave higher), 48 will play back at
/// half speed (1 octave lower) and so on
/// \param noteNumber MIDI Note Number to play
///
/// \param velocity MIDI Velocity
///
/// \param channel MIDI Channnel
///
- (BOOL)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel error:(NSError * _Nullable * _Nullable)error;
/// Stop a MIDI Note
/// \param noteNumber MIDI Note Number to stop
///
/// \param channel MIDI Channnel
///
- (BOOL)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel error:(NSError * _Nullable * _Nullable)error;
/// Load a Bank from a SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
/// \param bank Number of the bank to use
///
- (BOOL)loadSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset bank:(NSInteger)bank error:(NSError * _Nullable * _Nullable)error;
/// Load a Melodic SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadMelodicSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
/// Load a Percussive SoundFont SF2 sample data file
/// \param file Name of the SoundFont SF2 file without the .sf2 extension
///
/// \param preset Number of the program to use
///
- (BOOL)loadPercussiveSoundFont:(NSString * _Nonnull)file preset:(NSInteger)preset error:(NSError * _Nullable * _Nullable)error;
@end




/// Sequencer based on tried-and-true CoreAudio/MIDI Sequencing
SWIFT_CLASS("_TtC8AudioKit16AKAppleSequencer")
@interface AKAppleSequencer : NSObject
/// Sequencer Initialization
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Stop the sequence
- (void)stop;
@end


/// Audio file, inherits from AVAudioFile and adds functionality
SWIFT_CLASS("_TtC8AudioKit11AKAudioFile")
@interface AKAudioFile : AVAudioFile
/// Initialize the audio file
/// \param fileURL URL of the file
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// \param fileURL URL of the file
///
/// \param format The processing commonFormat to use when reading from the file.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// returns:
/// An initialized AKAudioFile object for reading, or nil if init failed.
- (nullable instancetype)initForReading:(NSURL * _Nonnull)fileURL commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize the audio file
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple‚Äôs AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it‚Äôs better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The format of the file to create.
///
/// \param format The processing commonFormat to use when writing.
///
/// \param interleaved Whether to use an interleaved processing format.
///
///
/// throws:
/// NSError if init failed
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings commonFormat:(AVAudioCommonFormat)format interleaved:(BOOL)interleaved error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Super.init inherited from AVAudioFile superclass
/// From Apple doc: The file type to create is inferred from the file extension of fileURL.
/// This method will overwrite a file at the specified URL if a file already exists.
/// The file is opened for writing using the standard format, AVAudioPCMFormatFloat32.
/// Note: It seems that Apple‚Äôs AVAudioFile class has a bug with .wav files. They cannot be set
/// with a floating Point encoding. As a consequence, such files will fail to record properly.
/// So it‚Äôs better to use .caf (or .aif) files for recording purpose.
/// \param fileURL URL of the file.
///
/// \param settings The settings of the file to create.
///
///
/// returns:
/// An initialized AKAudioFile for writing, or nil if init failed.
- (nullable instancetype)initForWriting:(NSURL * _Nonnull)fileURL settings:(NSDictionary<NSString *, id> * _Nonnull)settings error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@class AVAudioPCMBuffer;
@class AVAudioTime;

/// Not so simple audio playback class
SWIFT_CLASS("_TtC8AudioKit13AKAudioPlayer") SWIFT_DEPRECATED_MSG("Transition to using AKPlayer instead. This class will be removed in a future release.")
@interface AKAudioPlayer : AKNode
@property (nonatomic, strong) AVAudioPCMBuffer * _Nullable audioFileBuffer;
/// Will be triggered when AKAudioPlayer has finished to play.
/// (will not as long as loop is on)
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// Boolean indicating whether or not to loop the playback (Default false)
@property (nonatomic) BOOL looping;
/// Boolean indicating to play the buffer in reverse
@property (nonatomic) BOOL reversed;
/// Fade in duration
@property (nonatomic) double fadeInTime;
/// Fade out duration
@property (nonatomic) double fadeOutTime;
/// The current played AKAudioFile
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
/// Path to the currently loaded AKAudioFile
@property (nonatomic, readonly, copy) NSString * _Nonnull path;
/// Total duration of one loop through of the file
@property (nonatomic, readonly) double duration;
/// Output Volume (Default 1)
@property (nonatomic) AUValue volume;
/// Whether or not the audio player is currently started
@property (nonatomic, readonly) BOOL isStarted;
/// Current playback time (in seconds)
@property (nonatomic, readonly) double currentTime;
/// Time within the audio file at the current time
@property (nonatomic, readonly) double playhead;
/// Pan (Default Center = 0)
@property (nonatomic) AUValue pan;
/// Seconds into the audio file to start playback at
@property (nonatomic) double startTime;
/// Seconds into the audio file to stop playback
@property (nonatomic) double endTime;
/// Sets the time in the future when playback will commence. Recommend using play(from:to:avTime) instead.
/// this will be deprecated
@property (nonatomic) double scheduledTime;
/// Sheduled time
@property (nonatomic, strong) AVAudioTime * _Nullable scheduledAVTime;
/// Initialize the audio player
/// Notice that completionCallBack will be triggered from a
/// background thread. Any UI update should be made using:
/// \code
/// Dispatch.main.async {
///    // UI updates...
/// }
///
/// \endcode\param file the AKAudioFile to play
///
/// \param looping will loop play if set to true, or stop when play ends, so it can trig the
/// completionHandler callback. Default is false (non looping)
///
/// \param completionHandler AKCallback that will be triggered when the player end playing (useful for refreshing
/// UI so we‚Äôre not playing anymore, we stopped playing‚Ä¶)
///
///
/// returns:
/// an AKAudioPlayer if init succeeds, or nil if init fails. If fails, errors may be caught.
- (nullable instancetype)initWithFile:(AKAudioFile * _Nonnull)file looping:(BOOL)looping lazyBuffering:(BOOL)lazyBuffering error:(NSError * _Nullable * _Nullable)error completionHandler:(void (^ _Nullable)(void))completionHandler OBJC_DESIGNATED_INITIALIZER;
/// Start playback
- (void)start;
/// Stop playback
- (void)stop;
/// Replace player‚Äôs file with a new AKAudioFile file
- (BOOL)replaceWithFile:(AKAudioFile * _Nonnull)file error:(NSError * _Nullable * _Nullable)error;
/// Play from startTime to endTime
- (void)playFrom:(double)startTime;
/// Play from startTime to endTime
- (void)playFrom:(double)startTime to:(double)endTime;
/// Stop playback after next loop completes
- (void)stopAtNextLoopEnd;
@end


@class AKTuningTable;
@class AVAudioUnitMIDIInstrument;

/// Bare bones implementation of AKPolyphonic protocol
SWIFT_CLASS("_TtC8AudioKit16AKPolyphonicNode")
@interface AKPolyphonicNode : AKNode
/// Global tuning table used by AKPolyphonicNode (AKNode classes adopting AKPolyphonic protocol)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTuningTable * _Nonnull tuningTable;)
+ (AKTuningTable * _Nonnull)tuningTable SWIFT_WARN_UNUSED_RESULT;
+ (void)setTuningTable:(AKTuningTable * _Nonnull)value;
@property (nonatomic, strong) AVAudioUnitMIDIInstrument * _Nullable midiInstrument;
/// Play a sound corresponding to a MIDI note with frequency
/// \param noteNumber MIDI Note Number
///
/// \param velocity MIDI Velocity
///
/// \param frequency Play this frequency
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Play a sound corresponding to a MIDI note
/// \param noteNumber MIDI Note Number
///
/// \param velocity MIDI Velocity
///
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Stop a sound corresponding to a MIDI note
/// \param noteNumber MIDI Note Number
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit16AKMIDIInstrument")
@interface AKMIDIInstrument : AKPolyphonicNode
/// Start a note
/// \param noteNumber Note number to play
///
/// \param velocity Velocity at which to play the note (0 - 127)
///
/// \param channel Channel on which to play the note
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
/// Stop a note
/// \param noteNumber Note number to stop
///
/// \param channel Channel on which to stop the note
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
/// Receive program change
/// \param program MIDI Program Value (0-127)
///
/// \param channel MIDI Channel (1-16)
///
- (void)receivedMIDIProgramChange:(uint8_t)program channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
@end


/// Wrapper for audio units that accept MIDI (ie. instruments)
SWIFT_CLASS("_TtC8AudioKit21AKAudioUnitInstrument")
@interface AKAudioUnitInstrument : AKMIDIInstrument
/// Send MIDI Note On information to the audio unit
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         noteNumber: MIDI note number to play
///       </li>
///       <li>
///         velocity: MIDI velocity to play the note at
///       </li>
///       <li>
///         channel: MIDI channel to play the note on
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Send MIDI Note Off information to the audio unit
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         noteNumber: MIDI note number to stop
///       </li>
///       <li>
///         channel: MIDI channel to stop the note on
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
@end


/// Audio Unit Manager
SWIFT_CLASS("_TtC8AudioKit18AKAudioUnitManager")
@interface AKAudioUnitManager : NSObject
/// Initialize the manager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// Table-lookup panning with linear interpolation
SWIFT_CLASS("_TtC8AudioKit12AKAutoPanner")
@interface AKAutoPanner : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKAutoPannerAudioUnit")
@interface AKAutoPannerAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// An automatic wah effect, ported from Guitarix via Faust.
SWIFT_CLASS("_TtC8AudioKit9AKAutoWah")
@interface AKAutoWah : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit18AKAutoWahAudioUnit")
@interface AKAutoWahAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This node outputs a version of the audio source, amplitude-modified so
/// that its rms power is equal to that of the comparator audio source. Thus a
/// signal that has suffered loss of power (eg., in passing through a filter
/// bank) can be restored by matching it with, for instance, its own source. It
/// should be noted that this modifies amplitude only; output signal is not
/// altered in any other respect.
SWIFT_CLASS("_TtC8AudioKit10AKBalancer")
@interface AKBalancer : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this balance node
/// \param input Input node to process
///
/// \param comparator Audio to match power with
///
- (nonnull instancetype)init:(AKNode * _Nullable)input comparator:(AKNode * _Nonnull)comparator OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AudioKit19AKBalancerAudioUnit")
@interface AKBalancerAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKBandPassButterworthFilter")
@interface AKBandPassButterworthFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit36AKBandPassButterworthFilterAudioUnit")
@interface AKBandPassButterworthFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit29AKBandRejectButterworthFilter")
@interface AKBandRejectButterworthFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit38AKBandRejectButterworthFilterAudioUnit")
@interface AKBandRejectButterworthFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This will digitally degrade a signal.
SWIFT_CLASS("_TtC8AudioKit12AKBitCrusher")
@interface AKBitCrusher : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKBitCrusherAudioUnit")
@interface AKBitCrusherAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Stereo Booster
SWIFT_CLASS("_TtC8AudioKit9AKBooster")
@interface AKBooster : AKNode
/// Initialize this booster node
/// \param input AKNode whose output will be amplified
///
/// \param gain Amplification factor (Default: 1, Minimum: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input gain:(AUValue)gain OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AudioKit18AKBoosterAudioUnit")
@interface AKBoosterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Brownian noise generator
SWIFT_CLASS("_TtC8AudioKit15AKBrownianNoise")
@interface AKBrownianNoise : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit24AKBrownianNoiseAudioUnit")
@interface AKBrownianNoiseAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// New sample-accurate version of AKCallbackInstrument
/// Old AKCallbackInstrument renamed to AKMIDICallbackInstrument
/// If you have used this before, you should be able to simply switch to AKMIDICallbackInstrument
SWIFT_CLASS("_TtC8AudioKit20AKCallbackInstrument")
@interface AKCallbackInstrument : AKPolyphonicNode
- (nonnull instancetype)initWithMidiCallback:(void (^ _Nullable)(uint8_t, uint8_t, uint8_t))midiCallback OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Shane‚Äôs Chorus
SWIFT_CLASS("_TtC8AudioKit8AKChorus")
@interface AKChorus : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit17AKChorusAudioUnit")
@interface AKChorusAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This is was built using the JC reverb implentation found in FAUST. According
/// to the source code, the specifications for this implementation were found on
/// an old SAIL DART backup tape.
/// This class is derived from the CLM JCRev function, which is based on the use
/// of networks of simple allpass and comb delay filters.  This class implements
/// three series allpass units, followed by four parallel comb filters, and two
/// decorrelation delay lines in parallel at the output.
SWIFT_CLASS("_TtC8AudioKit16AKChowningReverb")
@interface AKChowningReverb : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit25AKChowningReverbAudioUnit")
@interface AKChowningReverbAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol containing timing information for scheduling audio clips in a timeline.  All
/// properties are time values in seconds, relative to a zero based timeline.
SWIFT_PROTOCOL("_TtP8AudioKit6AKClip_")
@protocol AKClip
/// The time in the timeline that the clip should begin playing.
@property (nonatomic, readonly) double time;
/// The offset into the clip‚Äôs audio (where to start playing from within the clip).
@property (nonatomic, readonly) double offset;
/// The duration of playback.
@property (nonatomic, readonly) double duration;
@end


/// AKClipMerger merges new clips into an existing array of validated clips and returns a
/// new array of validated clips including the new clip.
/// <h2>Validation rules:</h2>
/// <ul>
///   <li>
///     The clip itself must be valid as defined by the clip‚Äôs isValid function.
///   </li>
///   <li>
///     The clips in the array must not overlap each other (clip.time + clip.duration <= nextClip.time).
///   </li>
/// </ul>
/// The strategy used when a new clip overlaps an existing clip is last-in precedence.  Existing
/// clips will shortened, split, or removed in order to make room for the new clip.  Since clips
/// can be split or removed, merging a clip may result in the clip count decreasing when a clip is
/// merged, or increasing by more than 1.  This behavior requires that the clip merger create clips,
/// so to facilitate this need it uses a delegate.  When a clip is to be shortened, it is removed
/// from the existing clips, and a new clip is created using the delegate‚Äôs newClip function.  When
/// a clip is to be split, the original is removed and newClip will be called twice.  When a clip is
/// removed, the delegate‚Äôs clipWillBeRemoved function will be called (if implemented).
SWIFT_CLASS("_TtC8AudioKit12AKClipMerger")
@interface AKClipMerger : NSObject
/// Creates a validated array of clips with the new clip merged into an array of validated clips.
/// \param clip The clip to be merged
///
/// \param clips A validated clip array.
///
///
/// returns:
/// A validated array of clips containing the new clip merged with clips.
- (NSArray<id <AKClip>> * _Nonnull)mergeWithClip:(id <AKClip> _Nonnull)clip clips:(NSArray<id <AKClip>> * _Nonnull)clips SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Schedules multiple audio files to be played in a sequence.
SWIFT_CLASS("_TtC8AudioKit12AKClipPlayer")
@interface AKClipPlayer : AKNode
/// Stops playback.
- (void)stop;
@end


/// A timing protocol used for syncronizing different audio sources.
SWIFT_PROTOCOL("_TtP8AudioKit8AKTiming_")
@protocol AKTiming
/// Starts playback at a specific time.
/// \param audioTime A time in the audio render context.
///
- (void)startAt:(AVAudioTime * _Nullable)audioTime;
/// Stops playback immediately.
- (void)stop;
@property (nonatomic, readonly) BOOL isStarted;
/// Set position in playback timeline (seconds).
- (void)setPosition:(double)position;
/// Timeline time at an audio time
/// <ul>
///   <li>
///     Return: Position in the timeline context (seconds).
///   </li>
/// </ul>
/// \param audioTime A time in the audio render context.
///
- (double)positionAtAudioTime:(AVAudioTime * _Nullable)audioTime SWIFT_WARN_UNUSED_RESULT;
/// Audio time at timeline time
/// <ul>
///   <li>
///     Return: A time in the audio render context.
///   </li>
/// </ul>
/// \param position Time in the timeline context (seconds).
///
- (AVAudioTime * _Nullable)audioTimeAtPosition:(double)position SWIFT_WARN_UNUSED_RESULT;
@optional
/// Prepare for playback.  After prepare has been called, the node should be ready to begine playback immediately.
/// Time consuming operations necessary for playback (eg. disk reads) should be complete once prepare is called.
- (void)prepare;
@end


@interface AKClipPlayer (SWIFT_EXTENSION(AudioKit)) <AKTiming>
@property (nonatomic, readonly) BOOL isStarted;
- (void)startAt:(AVAudioTime * _Nullable)audioTime;
- (void)setPosition:(double)position;
- (double)positionAtAudioTime:(AVAudioTime * _Nullable)audioTime SWIFT_WARN_UNUSED_RESULT;
- (AVAudioTime * _Nullable)audioTimeAtPosition:(double)time SWIFT_WARN_UNUSED_RESULT;
- (void)prepare;
@end


/// Clips a signal to a predefined limit, in a ‚Äúsoft‚Äù manner, using one of three
/// methods.
SWIFT_CLASS("_TtC8AudioKit9AKClipper")
@interface AKClipper : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit18AKClipperAudioUnit")
@interface AKClipperAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This filter reiterates input with an echo density determined by
/// loopDuration. The attenuation rate is independent and is determined by
/// reverbDuration, the reverberation duration (defined as the time in seconds
/// for a signal to decay to 1/1000, or 60dB down from its original amplitude).
/// Output from a comb filter will appear only after loopDuration seconds.
SWIFT_CLASS("_TtC8AudioKit18AKCombFilterReverb")
@interface AKCombFilterReverb : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit27AKCombFilterReverbAudioUnit")
@interface AKCombFilterReverbAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit Compressor based on Apple‚Äôs DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKCompressor")
@interface AKCompressor : AKNode
/// Threshold (dB) ranges from -40 to 20 (Default: -20)
@property (nonatomic) AUValue threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) AUValue headRoom;
/// Attack Duration (seconds) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) AUValue attackDuration;
/// Release Duration (seconds) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) AUValue releaseDuration;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) AUValue compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) AUValue inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) AUValue outputAmplitude;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue masterGain;
/// Dry/Wet Mix (Default 1 / Fully Wet)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param attackDuration Attack Duration (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseDuration Release Duration (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(AUValue)threshold headRoom:(AUValue)headRoom attackDuration:(AUValue)attackDuration releaseDuration:(AUValue)releaseDuration masterGain:(AUValue)masterGain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AKConverter wraps the more complex AVFoundation and CoreAudio audio conversions in an easy to use format.
/// \code
/// let options = AKConverter.Options()
/// // any options left nil will assume the value of the input file
/// options.format = "wav"
/// options.sampleRate == 48000
/// options.bitDepth = 24
///
/// let converter = AKConverter(inputURL: oldURL, outputURL: newURL, options: options)
/// converter.start { error in
/// // check to see if error isn't nil, otherwise you're good
/// })
///
/// \endcode
SWIFT_CLASS("_TtC8AudioKit11AKConverter")
@interface AKConverter : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This module will perform partitioned convolution on an input signal using an
/// ftable as an impulse response.
SWIFT_CLASS("_TtC8AudioKit13AKConvolution")
@interface AKConvolution : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit22AKConvolutionAudioUnit")
@interface AKConvolutionAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// 8 delay line stereo FDN reverb, with feedback matrix based upon physical
/// modeling scattering junction of 8 lossless waveguides of equal
/// characteristic impedance.
SWIFT_CLASS("_TtC8AudioKit16AKCostelloReverb")
@interface AKCostelloReverb : AKNode
@end



SWIFT_CLASS("_TtC8AudioKit25AKCostelloReverbAudioUnit")
@interface AKCostelloReverbAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class AKSporthStack;

/// Custom Sporth Unit Generator (Ugen)
SWIFT_CLASS("_TtC8AudioKit12AKCustomUgen")
@interface AKCustomUgen : NSObject
/// Name of the Ugen
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// String describing the arugments: f for float / s for string, e.g. ‚Äúfsf‚Äù
@property (nonatomic, readonly, copy) NSString * _Nonnull argTypes;
/// Custom object that may be passed in
@property (nonatomic) id _Nullable userData;
/// The sporth stack
@property (nonatomic, strong) AKSporthStack * _Nonnull stack;
/// Duplicate the Ugen
- (AKCustomUgen * _Nonnull)duplicate SWIFT_WARN_UNUSED_RESULT;
/// Execute the compute function
@property (nonatomic, readonly) void (* _Nonnull callComputeFunction)(AKCustomUgen * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implements the DC blocking filter Y[i] = X[i] - X[i-1] + (igain * Y[i-1])
/// Based on work by Perry Cook.
SWIFT_CLASS("_TtC8AudioKit9AKDCBlock")
@interface AKDCBlock : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit18AKDCBlockAudioUnit")
@interface AKDCBlockAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs Decimator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKDecimator")
@interface AKDecimator : AKNode
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
@property (nonatomic) AUValue rounding;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) AUValue mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the decimator node
/// \param input Input node to process
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input decimation:(AUValue)decimation rounding:(AUValue)rounding mix:(AUValue)mix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs Delay Audio Unit
SWIFT_CLASS("_TtC8AudioKit7AKDelay")
@interface AKDelay : AKNode
/// Delay time in seconds (Default: 1)
@property (nonatomic) NSTimeInterval time;
/// Feedback (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue feedback;
/// Low pass cut-off frequency in Hertz (Default: 15000)
@property (nonatomic) AUValue lowPassCutoff;
/// Dry/Wet Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the delay node
/// \param input Input audio AKNode to process
///
/// \param time Delay time in seconds (Default: 1)
///
/// \param feedback Amount of feedback, ranges from 0 to 1 (Default: 0.5)
///
/// \param lowPassCutoff Low-pass cutoff frequency in Hz (Default 15000)
///
/// \param dryWetMix Amount of unprocessed (dry) to delayed (wet) audio, ranges from 0 to 1 (Default: 0.5)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input time:(AUValue)time feedback:(AUValue)feedback lowPassCutoff:(AUValue)lowPassCutoff dryWetMix:(AUValue)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Wrapper for audio device selection
SWIFT_CLASS("_TtC8AudioKit8AKDevice")
@interface AKDevice : NSObject
/// Printable device description
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Audio player that loads a sample into memory
SWIFT_CLASS("_TtC8AudioKit14AKDiskStreamer")
@interface AKDiskStreamer : AKNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// playback rate - A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) AUValue rate;
/// Volume - amplitude adjustment
@property (nonatomic) AUValue volume;
/// Loop Enabled - if enabled, the sample will loop back to the startpoint when the endpoint is reached.
/// When disabled, the sample will play through once from startPoint to endPoint
@property (nonatomic) BOOL loopEnabled;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this SamplePlayer node
/// \param volume Multiplication factor of the overall amplitude (Default: 1)
///
/// \param completionHandler Callback to run when the sample playback is completed
///
/// \param loadCompletionHandler Callback to run when the sample is loaded
///
- (nonnull instancetype)initWithVolume:(AUValue)volume completionHandler:(void (^ _Nonnull)(void))completionHandler loadCompletionHandler:(void (^ _Nonnull)(void))loadCompletionHandler OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit12AKDistortion")
@interface AKDistortion : AKNode
/// Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
@property (nonatomic) AUValue delay;
/// Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
@property (nonatomic) AUValue decay;
/// Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue delayMix;
/// Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue decimation;
/// Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) AUValue rounding;
/// Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue decimationMix;
/// Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue linearTerm;
/// Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue squaredTerm;
/// Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue cubicTerm;
/// Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue polynomialMix;
/// Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) AUValue ringModFreq1;
/// Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) AUValue ringModFreq2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue ringModBalance;
/// Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
@property (nonatomic) AUValue ringModMix;
/// Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
@property (nonatomic) AUValue softClipGain;
/// Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue finalMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the distortion node
/// \param input Input node to process
///
/// \param delay Delay (Milliseconds) ranges from 0.1 to 500 (Default: 0.1)
///
/// \param decay Decay (Rate) ranges from 0.1 to 50 (Default: 1.0)
///
/// \param delayMix Delay Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param decimation Decimation (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param rounding Rounding (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param decimationMix Decimation Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param linearTerm Linear Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param squaredTerm Squared Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param cubicTerm Cubic Term (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param polynomialMix Polynomial Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModFreq1 Ring Mod Freq1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModFreq2 Ring Mod Freq2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param ringModBalance Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param ringModMix Ring Mod Mix (Normalized Value) ranges from 0 to 1 (Default: 0.0)
///
/// \param softClipGain Soft Clip Gain (dB) ranges from -80 to 20 (Default: -6)
///
/// \param finalMix Final Mix (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input delay:(AUValue)delay decay:(AUValue)decay delayMix:(AUValue)delayMix decimation:(AUValue)decimation rounding:(AUValue)rounding decimationMix:(AUValue)decimationMix linearTerm:(AUValue)linearTerm squaredTerm:(AUValue)squaredTerm cubicTerm:(AUValue)cubicTerm polynomialMix:(AUValue)polynomialMix ringModFreq1:(AUValue)ringModFreq1 ringModFreq2:(AUValue)ringModFreq2 ringModBalance:(AUValue)ringModBalance ringModMix:(AUValue)ringModMix softClipGain:(AUValue)softClipGain finalMix:(AUValue)finalMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Physical model of the sound of dripping water. When triggered, it will
/// produce a droplet of water.
SWIFT_CLASS("_TtC8AudioKit6AKDrip")
@interface AKDrip : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit15AKDripAudioUnit")
@interface AKDripAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class AVAudioConnectionPoint;

/// Balanceable Mix between two signals, usually used for a dry signal and wet signal
SWIFT_CLASS("_TtC8AudioKit13AKDryWetMixer")
@interface AKDryWetMixer : AKNode
/// Balance (Default 0.5)
@property (nonatomic) double balance;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize this dry wet mixer node
/// \param input1 1st source
///
/// \param input2 2nd source
///
/// \param balance Balance Point (0 = all input1, 1 = all input2)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input1 :(AKNode * _Nullable)input2 balance:(double)balance OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDry:(AKNode * _Nonnull)dry wet:(AKNode * _Nonnull)wet balance:(double)balance;
@property (nonatomic, readonly, strong) AVAudioConnectionPoint * _Nonnull dryInput;
@property (nonatomic, readonly, strong) AVAudioConnectionPoint * _Nonnull wetInput;
@end

@class AVAudioPlayerNode;
@class AVAudioMixerNode;
@class AVAudioFormat;

/// AKPlayer is meant to be a simple yet powerful audio player that just works. It supports
/// scheduling of sounds, looping, fading, time-stretching, pitch-shifting and reversing.
/// Players can be locked to a common clock as well as video by using hostTime in the various play functions.
/// By default the player will buffer audio if needed, otherwise stream from disk. Reversing the audio will cause the
/// file to buffer. For seamless looping use buffered playback.
/// There are a few options for syncing to external objects.
/// A locked video function would resemble:
/// \code
/// func videoPlay(at time: TimeInterval = 0, hostTime: UInt64 = 0 ) {
/// let cmHostTime = CMClockMakeHostTimeFromSystemUnits(hostTime)
/// let cmVTime = CMTimeMakeWithSeconds(time, 1000000)
/// let futureTime = CMTimeAdd(cmHostTime, cmVTime)
/// videoPlayer.setRate(1, time: kCMTimeInvalid, atHostTime: futureTime)
/// }
///
/// \endcodeBasic usage looks like:
/// \code
/// guard let player = AKPlayer(url: url) else { return }
/// player.completionHandler = { AKLog("Done") }
///
/// // Loop Options
/// player.loop.start = 1
/// player.loop.end = 3
/// player.isLooping = true
/// player.buffer = true // if seamless is desired
///
/// player.play()
///
/// \endcodePlease note that pre macOS 10.13 / iOS 11 you will need to provide your own completionHandler if needed.
SWIFT_CLASS("_TtC8AudioKit8AKPlayer")
@interface AKPlayer : AKAbstractPlayer
/// The underlying player node
@property (nonatomic, strong) AVAudioPlayerNode * _Nonnull playerNode;
/// If sample rate conversion is needed
@property (nonatomic, strong) AVAudioMixerNode * _Nullable mixerNode;
/// Completion handler to be called when Audio is done playing. The handler won‚Äôt be called if
/// stop() is called while playing or when looping from a buffer. Requires iOS 11, macOS 10.13.
@property (nonatomic, copy) void (^ _Nullable completionHandler)(void);
/// Completion handler to be called when Audio has looped. The handler won‚Äôt be called if
/// stop() is called while playing.
@property (nonatomic, copy) void (^ _Nullable loopCompletionHandler)(void);
/// Used with buffering players
@property (nonatomic, strong) AVAudioPCMBuffer * _Nullable buffer;
/// The internal audio file
@property (nonatomic, readonly, strong) AVAudioFile * _Nullable audioFile;
/// The duration of the loaded audio file
@property (nonatomic, readonly) double duration;
@property (nonatomic, readonly) double sampleRate;
/// Volume 0.0 -> 1.0, default 1.0
/// This is different than gain
@property (nonatomic) AUValue volume;
/// Left/Right balance -1.0 -> 1.0, default 0.0
@property (nonatomic) AUValue pan;
///
/// returns:
/// The total frame count that is being playing.
/// Differs from the audioFile.length as this will be updated with the edited amount
/// of frames based on startTime and endTime
@property (nonatomic, readonly) AVAudioFrameCount frameCount;
///
/// returns:
/// The current frame while playing
@property (nonatomic, readonly) AVAudioFramePosition currentFrame;
///
/// returns:
/// Current time of the player in seconds while playing.
@property (nonatomic, readonly) double currentTime;
/// Returns the audioFile‚Äôs internal processingFormat
@property (nonatomic, readonly, strong) AVAudioFormat * _Nullable processingFormat;
/// true if the player is buffering audio rather than playing from disk
@property (nonatomic, readonly) BOOL isBuffered;
/// Will automatically normalize on buffer updates if enabled
@property (nonatomic) BOOL isNormalized;
/// returns if the player is currently paused
@property (nonatomic, readonly) BOOL isPaused;
/// Reversing the audio will set the player to buffering
@property (nonatomic) BOOL isReversed;
@property (nonatomic, readonly) BOOL isBufferFaded;
/// Create a player from a URL
- (nullable instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a player from an AVAudioFile (or AKAudioFile). If a file has previously
/// been opened for writing, you can reset it to readOnly with the reopenFile flag.
/// This is necessary in cases where AKMicrophone may of had access to the file.
- (nonnull instancetype)initWithAudioFile:(AVAudioFile * _Nonnull)audioFile reopenFile:(BOOL)reopenFile;
/// Play entire file right now
- (void)play;
/// Stop playback and cancel any pending scheduled playback or completion events
- (void)stop;
/// Dispose the audio file, buffer and nodes and release resources.
/// Only call when you are totally done with this class.
- (void)detach;
@end


SWIFT_CLASS("_TtC8AudioKit15AKDynamicPlayer")
@interface AKDynamicPlayer : AKPlayer
/// Stop playback and cancel any pending scheduled playback or completion events
- (void)stop;
/// Dispose the audio file, buffer and nodes and release resources.
/// Only call when you are totally done with this class.
- (void)detach;
@end


/// Dynamic range compressor from Faust
SWIFT_CLASS("_TtC8AudioKit24AKDynamicRangeCompressor")
@interface AKDynamicRangeCompressor : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit33AKDynamicRangeCompressorAudioUnit")
@interface AKDynamicRangeCompressorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit19AKDynamicsProcessor")
@interface AKDynamicsProcessor : AKNode
/// Threshold (dB) ranges from -100 to 20 (Default: -20)
@property (nonatomic) AUValue threshold;
/// Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
@property (nonatomic) AUValue headRoom;
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) AUValue expansionRatio;
/// Expansion Threshold (rate) ranges from -120 to 0 (Default: 0)
@property (nonatomic) AUValue expansionThreshold;
/// Attack Duration (secs) ranges from 0.001 to 0.3 (Default: 0.001)
@property (nonatomic) AUValue attackDuration;
/// Release Duration (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) AUValue releaseDuration;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) AUValue compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) AUValue inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) AUValue outputAmplitude;
/// Dry/Wet Mix (Default 1 Fully Wet)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param threshold Threshold (dB) ranges from -40 to 20 (Default: -20)
///
/// \param headRoom Head Room (dB) ranges from 0.1 to 40.0 (Default: 5)
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackDuration Attack Duration (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseDuration Release Duration (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
/// \param compressionAmount Compression Amount (dB) ranges from -40 to 40 (Default: 0)
///
/// \param inputAmplitude Input Amplitude (dB) ranges from -40 to 40 (Default: 0)
///
/// \param outputAmplitude Output Amplitude (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(AUValue)threshold headRoom:(AUValue)headRoom expansionRatio:(AUValue)expansionRatio expansionThreshold:(AUValue)expansionThreshold attackDuration:(AUValue)attackDuration releaseDuration:(AUValue)releaseDuration masterGain:(AUValue)masterGain compressionAmount:(AUValue)compressionAmount inputAmplitude:(AUValue)inputAmplitude outputAmplitude:(AUValue)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// A 2nd order tunable equalization filter that provides a peak/notch filter
/// for building parametric/graphic equalizers. With gain above 1, there will be
/// a peak at the center frequency with a width dependent on bandwidth. If gain
/// is less than 1, a notch is formed around the center frequency.
SWIFT_CLASS("_TtC8AudioKit17AKEqualizerFilter")
@interface AKEqualizerFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit26AKEqualizerFilterAudioUnit")
@interface AKEqualizerFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit Expander based on Apple‚Äôs DynamicsProcessor Audio Unit
SWIFT_CLASS("_TtC8AudioKit10AKExpander")
@interface AKExpander : AKNode
/// Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) AUValue expansionRatio;
/// Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
@property (nonatomic) AUValue expansionThreshold;
/// Attack Duration (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
@property (nonatomic) AUValue attackDuration;
/// Release Duration (secs) ranges from 0.01 to 3 (Default: 0.05)
@property (nonatomic) AUValue releaseDuration;
/// Master Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue masterGain;
/// Compression Amount (dB) read only
@property (nonatomic, readonly) AUValue compressionAmount;
/// Input Amplitude (dB) read only
@property (nonatomic, readonly) AUValue inputAmplitude;
/// Output Amplitude (dB) read only
@property (nonatomic, readonly) AUValue outputAmplitude;
/// Dry/Wet Mix (Default 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the dynamics processor node
/// \param input Input node to process
///
/// \param expansionRatio Expansion Ratio (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param expansionThreshold Expansion Threshold (rate) ranges from 1 to 50.0 (Default: 2)
///
/// \param attackDuration Attack Duration (secs) ranges from 0.0001 to 0.2 (Default: 0.001)
///
/// \param releaseDuration Release Duration (secs) ranges from 0.01 to 3 (Default: 0.05)
///
/// \param masterGain Master Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input threshold:(AUValue)threshold headRoom:(AUValue)headRoom expansionRatio:(AUValue)expansionRatio expansionThreshold:(AUValue)expansionThreshold attackDuration:(AUValue)attackDuration releaseDuration:(AUValue)releaseDuration masterGain:(AUValue)masterGain compressionAmount:(AUValue)compressionAmount inputAmplitude:(AUValue)inputAmplitude outputAmplitude:(AUValue)outputAmplitude OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end

@class EZAudioFFT;

/// FFT Calculation for any node
SWIFT_CLASS("_TtC8AudioKit8AKFFTTap")
@interface AKFFTTap : NSObject <EZAudioFFTDelegate>
/// Array of FFT data
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull fftData;
/// Callback function for FFT computation
- (void)fft:(EZAudioFFT * _Null_unspecified)fft updatedWithFFTData:(float * _Nonnull)fftData bufferSize:(vDSP_Length)bufferSize;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Classic FM Synthesis audio generation.
SWIFT_CLASS("_TtC8AudioKit14AKFMOscillator")
@interface AKFMOscillator : AKNode
@end



SWIFT_CLASS("_TtC8AudioKit23AKFMOscillatorAudioUnit")
@interface AKFMOscillatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end

@class AKTable;

/// Frequency Modulation Polyphonic Oscillator
SWIFT_CLASS("_TtC8AudioKit18AKFMOscillatorBank")
@interface AKFMOscillatorBank : AKPolyphonicNode
/// Waveform of the oscillator
@property (nonatomic, strong) AKTable * _Nullable waveform;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) AUValue carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) AUValue modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) AUValue modulationIndex;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param carrierMultiplier This multiplied by the baseFrequency gives the carrier frequency.
///
/// \param modulatingMultiplier This multiplied by the baseFrequency gives the modulating frequency.
///
/// \param modulationIndex This multiplied by the modulating frequency gives the modulation amplitude.
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform carrierMultiplier:(AUValue)carrierMultiplier modulatingMultiplier:(AUValue)modulatingMultiplier modulationIndex:(AUValue)modulationIndex attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Frequency Modulation Polyphonic Oscillator Filter Synth
SWIFT_CLASS("_TtC8AudioKit25AKFMOscillatorFilterSynth")
@interface AKFMOscillatorFilterSynth : AKPolyphonicNode
/// Waveform of the oscillator
@property (nonatomic, strong) AKTable * _Nullable waveform;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// This multiplied by the baseFrequency gives the carrier frequency.
@property (nonatomic) AUValue carrierMultiplier;
/// This multiplied by the baseFrequency gives the modulating frequency.
@property (nonatomic) AUValue modulatingMultiplier;
/// This multiplied by the modulating frequency gives the modulation amplitude.
@property (nonatomic) AUValue modulationIndex;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Filter Cutoff Frequency in Hz
@property (nonatomic) AUValue filterCutoffFrequency;
/// Filter Resonance
@property (nonatomic) AUValue filterResonance;
/// Filter Attack Duration in seconds
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay Duration in seconds
@property (nonatomic) AUValue filterDecayDuration;
/// Filter Sustain Level
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release Duration in seconds
@property (nonatomic) AUValue filterReleaseDuration;
/// Filter Envelope Strength
@property (nonatomic) AUValue filterEnvelopeStrength;
/// Filter LFO Depth
@property (nonatomic) AUValue filterLFODepth;
/// Filter LFO Rate
@property (nonatomic) AUValue filterLFORate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param carrierMultiplier This multiplied by the baseFrequency gives the carrier frequency.
///
/// \param modulatingMultiplier This multiplied by the baseFrequency gives the modulating frequency.
///
/// \param modulationIndex This multiplied by the modulating frequency gives the modulation amplitude.
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
/// \param filterCutoffFrequency Frequency of filter cutoff in Hz
///
/// \param filterResonance Filter resonance
///
/// \param filterAttackDuration Filter attack duration in seconds
///
/// \param filterDecayDuration Filter decay duration in seconds
///
/// \param filterSustainLevel Filter sustain level
///
/// \param filterReleaseDuration Filter release duration in seconds
///
/// \param filterEnvelopeStrength Strength of the filter envelope on filter
///
/// \param filterLFODepth Depth of LFO on filter
///
/// \param filterLFORate Speed of filter LFO
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform carrierMultiplier:(AUValue)carrierMultiplier modulatingMultiplier:(AUValue)modulatingMultiplier modulationIndex:(AUValue)modulationIndex attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate filterCutoffFrequency:(AUValue)filterCutoffFrequency filterResonance:(AUValue)filterResonance filterAttackDuration:(AUValue)filterAttackDuration filterDecayDuration:(AUValue)filterDecayDuration filterSustainLevel:(AUValue)filterSustainLevel filterReleaseDuration:(AUValue)filterReleaseDuration filterEnvelopeStrength:(AUValue)filterEnvelopeStrength filterLFODepth:(AUValue)filterLFODepth filterLFORate:(AUValue)filterLFORate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Stereo Fader. Similar to AKBooster but with the addition of
/// Automation support.
SWIFT_CLASS("_TtC8AudioKit7AKFader")
@interface AKFader : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit16AKFaderAudioUnit")
@interface AKFaderAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A file based AKClip
SWIFT_PROTOCOL("_TtP8AudioKit8FileClip_")
@protocol FileClip <AKClip>
@property (nonatomic, readonly, strong) AKAudioFile * _Nonnull audioFile;
@end


/// A FileClip implementation, used by AKClipPlayer.
SWIFT_CLASS("_TtC8AudioKit10AKFileClip")
@interface AKFileClip : NSObject <FileClip>
/// The audio file that will be read.
@property (nonatomic, strong) AKAudioFile * _Nonnull audioFile;
/// The time in the timeline that the clip should begin playing.
@property (nonatomic) double time;
/// The offset into the clip‚Äôs audio (where to start playing from within the clip).
@property (nonatomic) double offset;
/// The duration of playback.
@property (nonatomic) double duration;
/// Create a new file clip.
/// \param audioFile The audio file that will be read.
///
/// \param time The time in the timeline that the clip should begin playing.
///
/// \param offset The offset into the clip‚Äôs audio (where to start playing from within the clip).
///
/// \param duration The duration of playback.
///
- (nonnull instancetype)initWithAudioFile:(AKAudioFile * _Nonnull)audioFile time:(double)time offset:(double)offset duration:(double)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The protocol for the AKClipMerger‚Äôs delegate
/// It is the responsibility of the delegate to create a new clip when a an existing clip
/// has been altered or split.
SWIFT_PROTOCOL("_TtP8AudioKit17ClipMergeDelegate_")
@protocol ClipMergeDelegate
/// A new clip, derived from an existing clip, with specified values.
/// <ul>
///   <li>
///     Return A newly created clip with time, offset, and duration set to provided values.
///   </li>
/// </ul>
/// \param clip The existing clip that the new clip should be derived from.
///
/// \param time The newly created clip‚Äôs time.
///
/// \param offset The newly created clip‚Äôs time.
///
/// \param duration The newly created clip‚Äôs time.
///
- (id <AKClip> _Nullable)newClipFrom:(id <AKClip> _Nonnull)clip time:(double)time offset:(double)offset duration:(double)duration SWIFT_WARN_UNUSED_RESULT;
@optional
/// Called when an existing clip will be removed as a result of merging in a new clip.
- (void)clipWillBeRemoved:(id <AKClip> _Nonnull)clip;
@end


/// A class that manages the merging of AKFileClips.
SWIFT_CLASS("_TtC8AudioKit18AKFileClipSequence")
@interface AKFileClipSequence : NSObject <ClipMergeDelegate>
/// Clip merger delegate function
- (id <AKClip> _Nullable)newClipFrom:(id <AKClip> _Nonnull)clip time:(double)time offset:(double)offset duration:(double)duration SWIFT_WARN_UNUSED_RESULT;
/// A validated array of file clips.  Fails if setting an invalid array of clips.
@property (nonatomic, copy) NSArray<AKFileClip *> * _Nonnull clips;
/// Merges a clip into existing clips.  Fails if clip is invalid.
- (void)addWithClip:(AKFileClip * _Nonnull)clip;
/// Initialize a clip sequence with an array of clips.
/// \param clips An array of file clips.  Will not be set if clips are invalid.
///
- (nonnull instancetype)initWithClips:(NSArray<AKFileClip *> * _Nonnull)clips OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Stereo Flanger
SWIFT_CLASS("_TtC8AudioKit9AKFlanger")
@interface AKFlanger : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit18AKFlangerAudioUnit")
@interface AKFlangerAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This filter reiterates the input with an echo density determined by loop
/// time. The attenuation rate is independent and is determined by the
/// reverberation time (defined as the time in seconds for a signal to decay to
/// 1/1000, or 60dB down from its original amplitude).  Output will begin to
/// appear immediately.
SWIFT_CLASS("_TtC8AudioKit29AKFlatFrequencyResponseReverb")
@interface AKFlatFrequencyResponseReverb : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit38AKFlatFrequencyResponseReverbAudioUnit")
@interface AKFlatFrequencyResponseReverbAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// When fed with a pulse train, it will generate a series of overlapping
/// grains. Overlapping will occur when 1/freq < dec, but there is no upper
/// limit on the number of overlaps.
SWIFT_CLASS("_TtC8AudioKit15AKFormantFilter")
@interface AKFormantFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit24AKFormantFilterAudioUnit")
@interface AKFormantFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This is based on an algorithm originally created by Miller Puckette.
SWIFT_CLASS("_TtC8AudioKit18AKFrequencyTracker")
@interface AKFrequencyTracker : AKNode
/// Detected Amplitude (Use AKAmplitude tracker if you don‚Äôt need frequency)
@property (nonatomic, readonly) double amplitude;
/// Detected frequency
@property (nonatomic, readonly) double frequency;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit27AKHighPassButterworthFilter")
@interface AKHighPassButterworthFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit36AKHighPassButterworthFilterAudioUnit")
@interface AKHighPassButterworthFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs HighPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKHighPassFilter")
@interface AKHighPassFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) AUValue cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) AUValue resonance;
/// Dry/Wet Mix (Default: 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the high pass filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(AUValue)cutoffFrequency resonance:(AUValue)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs HighShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit17AKHighShelfFilter")
@interface AKHighShelfFilter : AKNode
/// Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
@property (nonatomic) AUValue cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue gain;
/// Dry/Wet Mix (Default 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the high shelf filter node
/// \param input Input node to process
///
/// \param cutOffFrequency Cut Off Frequency (Hz) ranges from 10000 to 22050 (Default: 10000)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutOffFrequency:(AUValue)cutOffFrequency gain:(AUValue)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// This is an implementation of Zoelzer‚Äôs parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit36AKHighShelfParametricEqualizerFilter")
@interface AKHighShelfParametricEqualizerFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit45AKHighShelfParametricEqualizerFilterAudioUnit")
@interface AKHighShelfParametricEqualizerFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A transitory used to pass connection information.
SWIFT_CLASS("_TtC8AudioKit17AKInputConnection")
@interface AKInputConnection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Analogue model of the Korg 35 Lowpass Filter
SWIFT_CLASS("_TtC8AudioKit19AKKorgLowPassFilter")
@interface AKKorgLowPassFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit28AKKorgLowPassFilterAudioUnit")
@interface AKKorgLowPassFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// These filters are Butterworth second-order IIR filters. They offer an almost
/// flat passband and very good precision and stopband attenuation.
SWIFT_CLASS("_TtC8AudioKit26AKLowPassButterworthFilter")
@interface AKLowPassButterworthFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit35AKLowPassButterworthFilterAudioUnit")
@interface AKLowPassButterworthFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs LowPassFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKLowPassFilter")
@interface AKLowPassFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
@property (nonatomic) AUValue cutoffFrequency;
/// Resonance (dB) ranges from -20 to 40 (Default: 0)
@property (nonatomic) AUValue resonance;
/// Dry/Wet Mix (Default 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the low pass filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 22050 (Default: 6900)
///
/// \param resonance Resonance (dB) ranges from -20 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(AUValue)cutoffFrequency resonance:(AUValue)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs LowShelfFilter Audio Unit
SWIFT_CLASS("_TtC8AudioKit16AKLowShelfFilter")
@interface AKLowShelfFilter : AKNode
/// Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
@property (nonatomic) AUValue cutoffFrequency;
/// Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue gain;
/// Dry/Wet Mix (Default 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the low shelf filter node
/// \param input Input node to process
///
/// \param cutoffFrequency Cutoff Frequency (Hz) ranges from 10 to 200 (Default: 80)
///
/// \param gain Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input cutoffFrequency:(AUValue)cutoffFrequency gain:(AUValue)gain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// This is an implementation of Zoelzer‚Äôs parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit35AKLowShelfParametricEqualizerFilter")
@interface AKLowShelfParametricEqualizerFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit44AKLowShelfParametricEqualizerFilterAudioUnit")
@interface AKLowShelfParametricEqualizerFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// MIDI Instrument that triggers functions on MIDI note on/off commands
/// This is used mostly with the AppleSequencer sending to a MIDIEndpointRef
/// Another callback instrument, AKCallbackInstrument
/// You will need to enable ‚ÄúBackground Modes - Audio‚Äù in your project for this to work.
SWIFT_CLASS("_TtC8AudioKit24AKMIDICallbackInstrument")
@interface AKMIDICallbackInstrument : AKMIDIInstrument
/// Will trigger in response to any noteOn Message
/// \param noteNumber MIDI Note Number being started
///
/// \param velocity MIDI Velocity (0-127)
///
/// \param channel MIDI Channel
///
- (void)startWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
/// Will trigger in response to any noteOff Message
/// \param noteNumber MIDI Note Number being stopped
///
/// \param channel MIDI Channel
///
- (void)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel offset:(MIDITimeStamp)offset;
@end


/// This class is used to count midi clock events and inform observers
/// every 24 pulses (1 quarter note)
/// If you wish to observer its events, then add your own AKMIDIBeatObserver
SWIFT_CLASS("_TtC8AudioKit19AKMIDIClockListener")
@interface AKMIDIClockListener : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC8AudioKit22AKMIDIMonoPolyListener")
@interface AKMIDIMonoPolyListener : NSObject
- (nonnull instancetype)initWithMono:(BOOL)mono OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AKMIDIMonoPolyListener (SWIFT_EXTENSION(AudioKit))
- (void)monoPolyChange;
@end


/// A version of AKInstrument specifically targeted to instruments that
/// should be triggerable via MIDI or sequenced with the sequencer.
SWIFT_CLASS("_TtC8AudioKit10AKMIDINode")
@interface AKMIDINode : AKNode
/// Initialize the MIDI node
/// \param node A polyphonic node that will be triggered via MIDI
///
/// \param midiOutputName Name of the node‚Äôs MIDI output
///
- (nonnull instancetype)initWithNode:(AKPolyphonicNode * _Nonnull)node midiOutputName:(NSString * _Nullable)midiOutputName OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8AudioKit18AKMIDIOMNIListener")
@interface AKMIDIOMNIListener : NSObject
- (nonnull instancetype)initWithOmni:(BOOL)omni OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AKMIDIOMNIListener (SWIFT_EXTENSION(AudioKit))
- (void)omniStateChange;
@end


/// MIDI receiving Sampler
/// Be sure to enableMIDI if you want to receive messages
SWIFT_CLASS("_TtC8AudioKit13AKMIDISampler")
@interface AKMIDISampler : AKAppleSampler
/// Start a note or trigger a sample
/// NB: when using an audio file, noteNumber 60 will play back the file at normal
/// speed, 72 will play back at double speed (1 octave higher), 48 will play back at
/// half speed (1 octave lower) and so on
/// \param noteNumber MIDI note number
///
/// \param velocity MIDI velocity
///
/// \param channel MIDI channel
///
- (BOOL)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel error:(NSError * _Nullable * _Nullable)error;
/// Stop a note
- (BOOL)stopWithNoteNumber:(uint8_t)noteNumber channel:(uint8_t)channel error:(NSError * _Nullable * _Nullable)error;
@end


/// This AKMIDIListener looks for midi system real time (SRT)
/// midi system messages.
SWIFT_CLASS("_TtC8AudioKit28AKMIDISystemRealTimeListener")
@interface AKMIDISystemRealTimeListener : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A AudioKit midi listener that looks at midi clock messages and calculates a BPM
/// Usage:
/// \code
/// let tempoListener = AKMIDITempoListener()
/// AKMIDI().addListener(tempoListener)
///
/// \endcodeMake your class a AKMIDITempoObserver and you will recieve callbacks when the BPM
/// changes.
/// \code
/// class YOURCLASS: AKMIDITempoObserver {
///     func receivedTempoUpdate(bpm: BPMType, label: String) {  ... }
///     func midiClockSlaveMode() { ... }
///     func midiClockMasterEnabled() { ... }
///
/// \endcodemidiClockSlaveMode() informs client that midi clock messages have been received
/// and the client may not become the clock master.  The client must stop all
/// transmission of MIDI clock.
/// midiClockMasterEnabled() informs client that midi clock messages have not been seen
/// in 1.6 seconds and the client is allowed to become the clock master.
SWIFT_CLASS("_TtC8AudioKit19AKMIDITempoListener")
@interface AKMIDITempoListener : NSObject
/// Create a BPM Listener
/// This object creates a clockListener: AKMIDIClockListener
/// The AKMIDIClockListener is informed every time there is a clock and it in turn informs its
/// AKMIDIBeatObserver‚Äôs whenever beat events happen.
/// \param smoothing [0 - 1] this value controls the tick smoothing and bpm smoothing (currently both are disabled)
///
/// \param bpmHistoryLimit When a bpm is calculated it‚Äôs stored in a array which is sized by this number.
/// The values in this array are averaged and that is the BPM result that is returned.
/// If you make this number larger, then BPM will change very slowly.
/// If you make this number small, then BPM will change very quickly.
///
- (nonnull instancetype)initWithSmoothing:(double)smoothing bpmHistoryLimit:(NSInteger)bpmHistoryLimit OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// A class that performs an action block, then starts a timer that
/// catches timeout conditions where a response is not received.
/// Since the external caller is responsible for what constitues succes,
/// they are expected to call succeed() which will prevent timeout from
/// happening.
SWIFT_CLASS("_TtC8AudioKit13AKMIDITimeout")
@interface AKMIDITimeout : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioEngine;

/// Top level AudioKit managing class
SWIFT_CLASS("_TtC8AudioKit9AKManager")
@interface AKManager : NSObject
/// Reference to the AV Audio Engine
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AVAudioEngine * _Nonnull engine;)
+ (AVAudioEngine * _Nonnull)engine SWIFT_WARN_UNUSED_RESULT;
+ (void)setEngine:(AVAudioEngine * _Nonnull)newValue;
/// An audio output operation that most applications will need to use last
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKNode * _Nullable output;)
+ (AKNode * _Nullable)output SWIFT_WARN_UNUSED_RESULT;
+ (void)setOutput:(AKNode * _Nullable)value;
/// Enumerate the list of available devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable devices;)
+ (NSArray<AKDevice *> * _Nullable)devices SWIFT_WARN_UNUSED_RESULT;
/// Enumerate the list of available input devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable inputDevices;)
+ (NSArray<AKDevice *> * _Nullable)inputDevices SWIFT_WARN_UNUSED_RESULT;
/// Enumerate the list of available output devices.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AKDevice *> * _Nullable outputDevices;)
+ (NSArray<AKDevice *> * _Nullable)outputDevices SWIFT_WARN_UNUSED_RESULT;
/// The name of the current input device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable inputDevice;)
+ (AKDevice * _Nullable)inputDevice SWIFT_WARN_UNUSED_RESULT;
/// The name of the current output device, if available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AKDevice * _Nullable outputDevice;)
+ (AKDevice * _Nullable)outputDevice SWIFT_WARN_UNUSED_RESULT;
/// Change the preferred input device, giving it one of the names from the list of available inputs.
+ (BOOL)setInputDevice:(AKDevice * _Nonnull)input error:(NSError * _Nullable * _Nullable)error;
/// Change the preferred output device, giving it one of the names from the list of available output.
+ (BOOL)setOutputDevice:(AKDevice * _Nonnull)output error:(NSError * _Nullable * _Nullable)error;
/// Disconnect all inputs
+ (void)disconnectAllInputs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface AKManager (SWIFT_EXTENSION(AudioKit))
/// Start up the audio engine
+ (BOOL)startAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop the audio engine
+ (BOOL)stopAndReturnError:(NSError * _Nullable * _Nullable)error;
+ (BOOL)shutdownAndReturnError:(NSError * _Nullable * _Nullable)error;
@end

@class AKTester;

@interface AKManager (SWIFT_EXTENSION(AudioKit))
/// Testing AKNode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AKTester * _Nullable tester;)
+ (AKTester * _Nullable)tester SWIFT_WARN_UNUSED_RESULT;
+ (void)setTester:(AKTester * _Nullable)value;
/// Test the output of a given node
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
/// \param afterStart Closure to execute at the beginning of the test
///
+ (BOOL)testWithNode:(AKNode * _Nonnull)node duration:(double)duration error:(NSError * _Nullable * _Nullable)error afterStart:(SWIFT_NOESCAPE void (^ _Nonnull)(void))afterStart;
/// Audition the test to hear what it sounds like
/// \param node AKNode to test
///
/// \param duration Number of seconds to test (accurate to the sample)
///
+ (BOOL)auditionTestWithNode:(AKNode * _Nonnull)node duration:(double)duration error:(NSError * _Nullable * _Nullable)error;
@end

@class AVAudioNode;

@interface AKManager (SWIFT_EXTENSION(AudioKit))
+ (void)connect:(AVAudioNode * _Nonnull)sourceNode to:(NSArray<AVAudioConnectionPoint *> * _Nonnull)destNodes fromBus:(AVAudioNodeBus)sourceBus format:(AVAudioFormat * _Nullable)format;
+ (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 fromBus:(AVAudioNodeBus)bus1 toBus:(AVAudioNodeBus)bus2 format:(AVAudioFormat * _Nullable)format;
+ (void)connect:(AVAudioNode * _Nonnull)node1 to:(AVAudioNode * _Nonnull)node2 format:(AVAudioFormat * _Nullable)format;
+ (void)detachWithNodes:(NSArray<AVAudioNode *> * _Nonnull)nodes;
/// Render output to an AVAudioFile for a duration.
/// NOTE: This will NOT render sequencer content;
/// MIDI content will need to be recorded in real time
/// \code
/// - Parameters:
///     - audioFile: A file initialized for writing
///     - duration: Duration to render, in seconds
///     - prerender: Closure called before rendering starts, used to start players, set initial parameters, etc.
///     - progress: Closure called while rendering, use this to fetch render progress
///
/// \endcode
+ (BOOL)renderToFile:(AVAudioFile * _Nonnull)audioFile duration:(double)duration error:(NSError * _Nullable * _Nullable)error prerender:(void (^ _Nullable)(void))prerender progress:(void (^ _Nullable)(double))progress SWIFT_AVAILABILITY(tvos,introduced=11) SWIFT_AVAILABILITY(macos,introduced=10.13) SWIFT_AVAILABILITY(ios,introduced=11);
@end


///
SWIFT_CLASS("_TtC8AudioKit10AKMetalBar")
@interface AKMetalBar : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit19AKMetalBarAudioUnit")
@interface AKMetalBarAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Operation-based generator
SWIFT_CLASS("_TtC8AudioKit20AKOperationGenerator")
@interface AKOperationGenerator : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Sporth language snippet
@property (nonatomic, copy) NSString * _Nonnull sporth;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Initialize this generator node with a generic sporth stack and a triggering flag
/// \param sporth String of valid Sporth code
///
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Useful metronome class that you can utilize for your own projects
SWIFT_CLASS("_TtC8AudioKit11AKMetronome")
@interface AKMetronome : AKOperationGenerator
/// Initialize the metronome
- (nonnull instancetype)initWithTempo:(double)tempo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens SWIFT_UNAVAILABLE;
@end


/// Audio from the standard input
SWIFT_CLASS("_TtC8AudioKit12AKMicrophone")
@interface AKMicrophone : AKNode
/// Output Volume (Default 1)
@property (nonatomic) AUValue volume;
/// Set the actual microphone device
- (BOOL)setDevice:(AKDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the microphone
- (nullable instancetype)initWith:(AVAudioFormat * _Nullable)format OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs Mixer Node. Mixes a varaiadic list of AKNodes.
SWIFT_CLASS("_TtC8AudioKit7AKMixer")
@interface AKMixer : AKNode
/// Output Volume (Default 1)
@property (nonatomic) AUValue volume;
/// Output Pan (Default 0 = center)
@property (nonatomic) AUValue pan;
/// Determine if the mixer is serving any output or if it is stopped.
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the mixer node with no inputs, to be connected later
- (nonnull instancetype)initWithVolume:(AUValue)volume OBJC_DESIGNATED_INITIALIZER;
/// Initialize the mixer node with multiple inputs
/// \param inputs An array of AKNodes
///
- (nonnull instancetype)init:(NSArray<AKNode *> * _Nonnull)inputs;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
/// Connect for Objectivec access, with bus definition
- (void)connectWithInput:(AKNode * _Nullable)input bus:(NSInteger)bus;
/// Connect for Objectivec access
- (void)connectWithInput:(AKNode * _Nullable)input;
@end


/// A modal resonance filter used for modal synthesis. Plucked and bell sounds
/// can be created using  passing an impulse through a combination of modal
/// filters.
SWIFT_CLASS("_TtC8AudioKit22AKModalResonanceFilter")
@interface AKModalResonanceFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit31AKModalResonanceFilterAudioUnit")
@interface AKModalResonanceFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Moog Ladder is an new digital implementation of the Moog ladder filter based
/// on the work of Antti Huovilainen, described in the paper ‚ÄúNon-Linear Digital
/// Implementation of the Moog Ladder Filter‚Äù (Proceedings of DaFX04, Univ of
/// Napoli). This implementation is probably a more accurate digital
/// representation of the original analogue filter.
SWIFT_CLASS("_TtC8AudioKit12AKMoogLadder")
@interface AKMoogLadder : AKNode
@end



SWIFT_CLASS("_TtC8AudioKit21AKMoogLadderAudioUnit")
@interface AKMoogLadderAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit20AKMorphingOscillator")
@interface AKMorphingOscillator : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit29AKMorphingOscillatorAudioUnit")
@interface AKMorphingOscillatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit24AKMorphingOscillatorBank")
@interface AKMorphingOscillatorBank : AKPolyphonicNode
/// An array of tables to morph between
@property (nonatomic, copy) NSArray<AKTable *> * _Nonnull waveformArray;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) AUValue index;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Initialize this oscillator node
/// \param waveformArray An array of 4 waveforms
///
/// \param index Index of the wavetable to use (fractional are okay).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
- (nonnull instancetype)initWithWaveformArray:(NSArray<AKTable *> * _Nonnull)waveformArray index:(AUValue)index attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// This is an oscillator with linear interpolation that is capable of morphing
/// between an arbitrary number of wavetables.
SWIFT_CLASS("_TtC8AudioKit31AKMorphingOscillatorFilterSynth")
@interface AKMorphingOscillatorFilterSynth : AKPolyphonicNode
/// An array of tables to morph between
@property (nonatomic, copy) NSArray<AKTable *> * _Nonnull waveformArray;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Index of the wavetable to use (fractional are okay).
@property (nonatomic) AUValue index;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Filter Cutoff Frequency in Hz
@property (nonatomic) AUValue filterCutoffFrequency;
/// Filter Resonance
@property (nonatomic) AUValue filterResonance;
/// Filter Attack Duration in seconds
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay Duration in seconds
@property (nonatomic) AUValue filterDecayDuration;
/// Filter Sustain Level
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release Duration in seconds
@property (nonatomic) AUValue filterReleaseDuration;
/// Filter Envelope Strength
@property (nonatomic) AUValue filterEnvelopeStrength;
/// Filter LFO Depth
@property (nonatomic) AUValue filterLFODepth;
/// Filter LFO Rate
@property (nonatomic) AUValue filterLFORate;
/// Initialize this oscillator node
/// \param waveformArray An array of 4 waveforms
///
/// \param index Index of the wavetable to use (fractional are okay).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
/// \param filterCutoffFrequency Frequency of filter cutoff in Hz
///
/// \param filterResonance Filter resonance
///
/// \param filterAttackDuration Filter attack duration in seconds
///
/// \param filterDecayDuration Filter decay duration in seconds
///
/// \param filterSustainLevel Filter sustain level
///
/// \param filterReleaseDuration Filter release duration in seconds
///
/// \param filterEnvelopeStrength Strength of the filter envelope on filter
///
/// \param filterLFODepth Depth of LFO on filter
///
/// \param filterLFORate Speed of filter LFO
///
- (nonnull instancetype)initWithWaveformArray:(NSArray<AKTable *> * _Nonnull)waveformArray index:(AUValue)index attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate filterCutoffFrequency:(AUValue)filterCutoffFrequency filterResonance:(AUValue)filterResonance filterAttackDuration:(AUValue)filterAttackDuration filterDecayDuration:(AUValue)filterDecayDuration filterSustainLevel:(AUValue)filterSustainLevel filterReleaseDuration:(AUValue)filterReleaseDuration filterEnvelopeStrength:(AUValue)filterEnvelopeStrength filterLFODepth:(AUValue)filterLFODepth filterLFORate:(AUValue)filterLFORate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end



/// Simplify making connections from a node.
SWIFT_PROTOCOL("_TtP8AudioKit8AKOutput_")
@protocol AKOutput
/// The output of this node can be connected to the inputNode of an AKInput.
@property (nonatomic, readonly, strong) AVAudioNode * _Nonnull outputNode;
@end


@interface AKNode (SWIFT_EXTENSION(AudioKit)) <AKOutput>
@property (nonatomic, readonly, strong) AVAudioNode * _Nonnull outputNode;
@end


/// Simple audio recorder class
SWIFT_CLASS("_TtC8AudioKit14AKNodeRecorder")
@interface AKNodeRecorder : NSObject
/// True if we are recording.
@property (nonatomic, readonly) BOOL isRecording;
/// An optional duration for the recording to auto-stop when reached
@property (nonatomic) double durationToRecord;
/// Duration of recording
@property (nonatomic, readonly) double recordedDuration;
/// return the AKAudioFile for reading
@property (nonatomic, readonly, strong) AKAudioFile * _Nullable audioFile;
/// Initialize the node recorder
/// Recording buffer size is defaulted to be AKSettings.bufferLength
/// You can set a different value by setting an AKSettings.recordingBufferLength
/// \param node Node to record from
///
/// \param file Audio file to record to
///
/// \param bus Integer index of the bus to use
///
- (nullable instancetype)initWithNode:(AKNode * _Nullable)node file:(AKAudioFile * _Nullable)file bus:(NSInteger)bus error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Start recording
- (BOOL)recordAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Stop recording
- (void)stop;
/// Reset the AKAudioFile to clear previous recordings
- (BOOL)resetAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An AKTiming implementation that uses a node for it‚Äôs render time info.
SWIFT_CLASS("_TtC8AudioKit12AKNodeTiming")
@interface AKNodeTiming : NSObject
/// Stops playback immediately.
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AKNodeTiming (SWIFT_EXTENSION(AudioKit)) <AKTiming>
@property (nonatomic, readonly) BOOL isStarted;
- (double)positionAtAudioTime:(AVAudioTime * _Nullable)audioTime SWIFT_WARN_UNUSED_RESULT;
- (AVAudioTime * _Nullable)audioTimeAtPosition:(double)position SWIFT_WARN_UNUSED_RESULT;
- (void)startAt:(AVAudioTime * _Nullable)audioTime;
- (void)setPosition:(double)position;
@end


/// Operation-based effect
SWIFT_CLASS("_TtC8AudioKit17AKOperationEffect")
@interface AKOperationEffect : AKNode
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Parameters for changing internal operations
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull parameters;
/// Initialize the effect with an input and a valid Sporth string
/// \param input AKNode to use for processing
///
/// \param sporth String of valid Sporth code
///
- (nonnull instancetype)init:(AKNode * _Nullable)input sporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit12AKOscillator")
@interface AKOscillator : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKOscillatorAudioUnit")
@interface AKOscillatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit16AKOscillatorBank")
@interface AKOscillatorBank : AKPolyphonicNode
/// Waveform of the oscillator
@property (nonatomic, strong) AKTable * _Nullable waveform;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Reads from the table sequentially and repeatedly at given frequency. Linear
/// interpolation is applied for table look up from internal phase values.
SWIFT_CLASS("_TtC8AudioKit23AKOscillatorFilterSynth")
@interface AKOscillatorFilterSynth : AKPolyphonicNode
/// Waveform of the oscillator
@property (nonatomic, strong) AKTable * _Nullable waveform;
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Filter Cutoff Frequency in Hz
@property (nonatomic) AUValue filterCutoffFrequency;
/// Filter Resonance
@property (nonatomic) AUValue filterResonance;
/// Filter Attack Duration in seconds
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay Duration in seconds
@property (nonatomic) AUValue filterDecayDuration;
/// Filter Sustain Level
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release Duration in seconds
@property (nonatomic) AUValue filterReleaseDuration;
/// Filter Envelope Strength
@property (nonatomic) AUValue filterEnvelopeStrength;
/// Filter LFO Depth
@property (nonatomic) AUValue filterLFODepth;
/// Filter LFO Rate
@property (nonatomic) AUValue filterLFORate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
/// \param filterCutoffFrequency Frequency of filter cutoff in Hz
///
/// \param filterResonance Filter resonance
///
/// \param filterAttackDuration Filter attack duration in seconds
///
/// \param filterDecayDuration Filter decay duration in seconds
///
/// \param filterSustainLevel Filter sustain level
///
/// \param filterReleaseDuration Filter release duration in seconds
///
/// \param filterEnvelopeStrength Strength of the filter envelope on filter
///
/// \param filterLFODepth Depth of LFO on filter
///
/// \param filterLFORate Speed of filter LFO
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate filterCutoffFrequency:(AUValue)filterCutoffFrequency filterResonance:(AUValue)filterResonance filterAttackDuration:(AUValue)filterAttackDuration filterDecayDuration:(AUValue)filterDecayDuration filterSustainLevel:(AUValue)filterSustainLevel filterReleaseDuration:(AUValue)filterReleaseDuration filterEnvelopeStrength:(AUValue)filterEnvelopeStrength filterLFODepth:(AUValue)filterLFODepth filterLFORate:(AUValue)filterLFORate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end



/// Casio-style phase distortion with ‚Äúpivot point‚Äù on the X axis This module is
/// designed to emulate the classic phase distortion synthesis technique. From
/// the mid 90‚Äôs. The technique reads the first and second halves of the ftbl at
/// different rates in order to warp the waveform. For example, pdhalf can
/// smoothly transition a sinewave into something approximating a sawtooth wave.
SWIFT_CLASS("_TtC8AudioKit15AKPWMOscillator")
@interface AKPWMOscillator : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit24AKPWMOscillatorAudioUnit")
@interface AKPWMOscillatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Pulse-Width Modulating Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit19AKPWMOscillatorBank")
@interface AKPWMOscillatorBank : AKPolyphonicNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Duty cycle width (range 0-1).
@property (nonatomic) AUValue pulseWidth;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Initialize this oscillator node
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
- (nonnull instancetype)initWithPulseWidth:(AUValue)pulseWidth attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Pulse-Width Modulating Oscillator Filter Synth
SWIFT_CLASS("_TtC8AudioKit26AKPWMOscillatorFilterSynth")
@interface AKPWMOscillatorFilterSynth : AKPolyphonicNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Duty cycle width (range 0-1).
@property (nonatomic) AUValue pulseWidth;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Filter Cutoff Frequency in Hz
@property (nonatomic) AUValue filterCutoffFrequency;
/// Filter Resonance
@property (nonatomic) AUValue filterResonance;
/// Filter Attack Duration in seconds
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay Duration in seconds
@property (nonatomic) AUValue filterDecayDuration;
/// Filter Sustain Level
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release Duration in seconds
@property (nonatomic) AUValue filterReleaseDuration;
/// Filter Envelope Strength
@property (nonatomic) AUValue filterEnvelopeStrength;
/// Filter LFO Depth
@property (nonatomic) AUValue filterLFODepth;
/// Filter LFO Rate
@property (nonatomic) AUValue filterLFORate;
/// Initialize this oscillator node
/// \param pulseWidth Duty cycle width (range 0-1).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
/// \param filterCutoffFrequency Frequency of filter cutoff in Hz
///
/// \param filterResonance Filter resonance
///
/// \param filterAttackDuration Filter attack duration in seconds
///
/// \param filterDecayDuration Filter decay duration in seconds
///
/// \param filterSustainLevel Filter sustain level
///
/// \param filterReleaseDuration Filter release duration in seconds
///
/// \param filterEnvelopeStrength Strength of the filter envelope on filter
///
/// \param filterLFODepth Depth of LFO on filter
///
/// \param filterLFORate Speed of filter LFO
///
- (nonnull instancetype)initWithPulseWidth:(AUValue)pulseWidth attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate filterCutoffFrequency:(AUValue)filterCutoffFrequency filterResonance:(AUValue)filterResonance filterAttackDuration:(AUValue)filterAttackDuration filterDecayDuration:(AUValue)filterDecayDuration filterSustainLevel:(AUValue)filterSustainLevel filterReleaseDuration:(AUValue)filterReleaseDuration filterEnvelopeStrength:(AUValue)filterEnvelopeStrength filterLFODepth:(AUValue)filterLFODepth filterLFORate:(AUValue)filterLFORate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Stereo Panner
SWIFT_CLASS("_TtC8AudioKit8AKPanner")
@interface AKPanner : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit17AKPannerAudioUnit")
@interface AKPannerAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs PeakLimiter Audio Unit
SWIFT_CLASS("_TtC8AudioKit13AKPeakLimiter")
@interface AKPeakLimiter : AKNode
/// Attack Duration (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
@property (nonatomic) AUValue attackDuration;
/// Decay Duration (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
@property (nonatomic) AUValue decayDuration;
/// Pre Gain (dB) ranges from -40 to 40 (Default: 0)
@property (nonatomic) AUValue preGain;
/// Dry/Wet Mix (Default 1)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the peak limiter node
/// \param input Input node to process
///
/// \param attackDuration Attack Duration (Secs) ranges from 0.001 to 0.03 (Default: 0.012)
///
/// \param decayDuration Decay Duration (Secs) ranges from 0.001 to 0.06 (Default: 0.024)
///
/// \param preGain Pre Gain (dB) ranges from -40 to 40 (Default: 0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration preGain:(AUValue)preGain OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// This is an implementation of Zoelzer‚Äôs parametric equalizer filter.
SWIFT_CLASS("_TtC8AudioKit34AKPeakingParametricEqualizerFilter")
@interface AKPeakingParametricEqualizerFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit43AKPeakingParametricEqualizerFilterAudioUnit")
@interface AKPeakingParametricEqualizerFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A class to periodically perform a callback
SWIFT_CLASS("_TtC8AudioKit18AKPeriodicFunction")
@interface AKPeriodicFunction : AKOperationGenerator
/// Repeat this loop at a given period with a code block
/// \param period Interval between block executions
///
/// \param handler Code block to execute
///
- (nonnull instancetype)initWithEvery:(double)period handler:(void (^ _Nonnull)(void))handler OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSporth:(NSString * _Nonnull)sporth customUgens:(NSArray<AKCustomUgen *> * _Nonnull)customUgens SWIFT_UNAVAILABLE;
@end


/// Casio-style phase distortion with ‚Äúpivot point‚Äù on the X axis This module is
/// designed to emulate the classic phase distortion synthesis technique. From
/// the mid 90‚Äôs. The technique reads the first and second halves of the ftbl at
/// different rates in order to warp the waveform. For example, pdhalf can
/// smoothly transition a sinewave into something approximating a sawtooth wave.
SWIFT_CLASS("_TtC8AudioKit27AKPhaseDistortionOscillator")
@interface AKPhaseDistortionOscillator : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit36AKPhaseDistortionOscillatorAudioUnit")
@interface AKPhaseDistortionOscillatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Phase Distortion Oscillator Bank
SWIFT_CLASS("_TtC8AudioKit31AKPhaseDistortionOscillatorBank")
@interface AKPhaseDistortionOscillatorBank : AKPolyphonicNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) AUValue phaseDistortion;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param phaseDistortion Phase distortion amount (range -1 - 1).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform phaseDistortion:(AUValue)phaseDistortion attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Phase Distortion Oscillator Filter Synth
SWIFT_CLASS("_TtC8AudioKit38AKPhaseDistortionOscillatorFilterSynth")
@interface AKPhaseDistortionOscillatorFilterSynth : AKPolyphonicNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// Duty cycle width (range -1 - 1).
@property (nonatomic) AUValue phaseDistortion;
/// Attack duration in seconds
@property (nonatomic) AUValue attackDuration;
/// Decay duration in seconds
@property (nonatomic) AUValue decayDuration;
/// Sustain Level
@property (nonatomic) AUValue sustainLevel;
/// Release duration in seconds
@property (nonatomic) AUValue releaseDuration;
/// Pitch Bend as number of semitones
@property (nonatomic) AUValue pitchBend;
/// Vibrato Depth in semitones
@property (nonatomic) AUValue vibratoDepth;
/// Vibrato Rate in Hz
@property (nonatomic) AUValue vibratoRate;
/// Filter Cutoff Frequency in Hz
@property (nonatomic) AUValue filterCutoffFrequency;
/// Filter Resonance
@property (nonatomic) AUValue filterResonance;
/// Filter Attack Duration in seconds
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay Duration in seconds
@property (nonatomic) AUValue filterDecayDuration;
/// Filter Sustain Level
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release Duration in seconds
@property (nonatomic) AUValue filterReleaseDuration;
/// Filter Envelope Strength
@property (nonatomic) AUValue filterEnvelopeStrength;
/// Filter LFO Depth
@property (nonatomic) AUValue filterLFODepth;
/// Filter LFO Rate
@property (nonatomic) AUValue filterLFORate;
/// Initialize this oscillator node
/// \param waveform The waveform of oscillation
///
/// \param phaseDistortion Phase distortion amount (range -1 - 1).
///
/// \param attackDuration Attack duration in seconds
///
/// \param decayDuration Decay duration in seconds
///
/// \param sustainLevel Sustain Level
///
/// \param releaseDuration Release duration in seconds
///
/// \param pitchBend Change of pitch in semitones
///
/// \param vibratoDepth Vibrato size in semitones
///
/// \param vibratoRate Frequency of vibrato in Hz
///
/// \param filterCutoffFrequency Frequency of filter cutoff in Hz
///
/// \param filterResonance Filter resonance
///
/// \param filterAttackDuration Filter attack duration in seconds
///
/// \param filterDecayDuration Filter decay duration in seconds
///
/// \param filterSustainLevel Filter sustain level
///
/// \param filterReleaseDuration Filter release duration in seconds
///
/// \param filterEnvelopeStrength Strength of the filter envelope on filter
///
/// \param filterLFODepth Depth of LFO on filter
///
/// \param filterLFORate Speed of filter LFO
///
- (nonnull instancetype)initWithWaveform:(AKTable * _Nonnull)waveform phaseDistortion:(AUValue)phaseDistortion attackDuration:(AUValue)attackDuration decayDuration:(AUValue)decayDuration sustainLevel:(AUValue)sustainLevel releaseDuration:(AUValue)releaseDuration pitchBend:(AUValue)pitchBend vibratoDepth:(AUValue)vibratoDepth vibratoRate:(AUValue)vibratoRate filterCutoffFrequency:(AUValue)filterCutoffFrequency filterResonance:(AUValue)filterResonance filterAttackDuration:(AUValue)filterAttackDuration filterDecayDuration:(AUValue)filterDecayDuration filterSustainLevel:(AUValue)filterSustainLevel filterReleaseDuration:(AUValue)filterReleaseDuration filterEnvelopeStrength:(AUValue)filterEnvelopeStrength filterLFODepth:(AUValue)filterLFODepth filterLFORate:(AUValue)filterLFORate OBJC_DESIGNATED_INITIALIZER;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
/// Function to stop or bypass the node, both are equivalent
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// This is a phase locked vocoder. It has the ability to play back an audio
/// file loaded into an ftable like a sampler would. Unlike a typical sampler,
/// mincer allows time and pitch to be controlled separately.
SWIFT_CLASS("_TtC8AudioKit20AKPhaseLockedVocoder")
@interface AKPhaseLockedVocoder : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit29AKPhaseLockedVocoderAudioUnit")
@interface AKPhaseLockedVocoderAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A stereo phaser This is a stereo phaser, generated from Faust code taken
/// from the Guitarix project.
SWIFT_CLASS("_TtC8AudioKit8AKPhaser")
@interface AKPhaser : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit17AKPhaserAudioUnit")
@interface AKPhaserAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Faust-based pink noise generator
SWIFT_CLASS("_TtC8AudioKit11AKPinkNoise")
@interface AKPinkNoise : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit20AKPinkNoiseAudioUnit")
@interface AKPinkNoiseAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Faust-based pitch shfiter
SWIFT_CLASS("_TtC8AudioKit14AKPitchShifter")
@interface AKPitchShifter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit23AKPitchShifterAudioUnit")
@interface AKPitchShifterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end



@interface AKPlayer (SWIFT_EXTENSION(AudioKit))
/// Replace the contents of the player with this url. Note that if your processingFormat changes
/// you should dispose this AKPlayer and create a new one instead.
- (BOOL)loadWithUrl:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error;
/// Load a new audio file into this player. Note that if your processingFormat changes
/// you should dispose this AKPlayer and create a new one instead.
- (BOOL)loadWithAudioFile:(AVAudioFile * _Nonnull)audioFile error:(NSError * _Nullable * _Nullable)error;
/// Mostly applicable to buffered players, this loads the buffer and gets it ready to play.
/// Otherwise it just sets the edit points and enables the fader if the region
/// has fade in or out applied to it.
- (void)prerollFrom:(double)startingTime to:(double)endingTime;
@end



@interface AKPlayer (SWIFT_EXTENSION(AudioKit)) <AKTiming>
- (void)startAt:(AVAudioTime * _Nullable)audioTime;
@property (nonatomic, readonly) BOOL isStarted;
- (void)setPosition:(double)position;
- (double)positionAtAudioTime:(AVAudioTime * _Nullable)audioTime SWIFT_WARN_UNUSED_RESULT;
- (AVAudioTime * _Nullable)audioTimeAtPosition:(double)position SWIFT_WARN_UNUSED_RESULT;
- (void)prepare;
@end


@interface AKPlayer (SWIFT_EXTENSION(AudioKit))
/// Play segments of a file
- (void)playFrom:(double)startingTime to:(double)endingTime;
/// Play file using previously set startTime and endTime at some point in the future.
/// If the audioTime is in the past it will be played now.
- (void)playAt:(AVAudioTime * _Nullable)audioTime;
- (void)pause;
- (void)resume;
@end


/// Karplus-Strong plucked string instrument.
SWIFT_CLASS("_TtC8AudioKit15AKPluckedString")
@interface AKPluckedString : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit24AKPluckedStringAudioUnit")
@interface AKPluckedStringAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end



/// The output for reson appears to be very hot, so take caution when using this
/// module.
SWIFT_CLASS("_TtC8AudioKit16AKResonantFilter")
@interface AKResonantFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit25AKResonantFilterAudioUnit")
@interface AKResonantFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs Reverb Audio Unit
SWIFT_CLASS("_TtC8AudioKit8AKReverb")
@interface AKReverb : AKNode
/// Dry/Wet Mix (Default 0.5)
@property (nonatomic) AUValue dryWetMix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the reverb node
/// \param input AKNode to reverberate
///
/// \param dryWetMix Amount of processed signal (Default: 0.5, Range: 0 - 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input dryWetMix:(AUValue)dryWetMix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs Reverb2 Audio Unit
SWIFT_CLASS("_TtC8AudioKit9AKReverb2")
@interface AKReverb2 : AKNode
/// Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue dryWetMix;
/// Gain (Decibels) ranges from -20 to 20 (Default: 0)
@property (nonatomic) AUValue gain;
/// Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
@property (nonatomic) AUValue minDelayTime;
/// Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
@property (nonatomic) AUValue maxDelayTime;
/// Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
@property (nonatomic) AUValue decayTimeAt0Hz;
/// Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
@property (nonatomic) AUValue decayTimeAtNyquist;
/// Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
@property (nonatomic) AUValue randomizeReflections;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the reverb2 node
/// \param input Input node to process
///
/// \param dryWetMix Dry Wet Mix (CrossFade) ranges from 0 to 1 (Default: 0.5)
///
/// \param gain Gain (Decibels) ranges from -20 to 20 (Default: 0)
///
/// \param minDelayTime Min Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.008)
///
/// \param maxDelayTime Max Delay Time (Secs) ranges from 0.0001 to 1.0 (Default: 0.050)
///
/// \param decayTimeAt0Hz Decay Time At0 Hz (Secs) ranges from 0.001 to 20.0 (Default: 1.0)
///
/// \param decayTimeAtNyquist Decay Time At Nyquist (Secs) ranges from 0.001 to 20.0 (Default: 0.5)
///
/// \param randomizeReflections Randomize Reflections (Integer) ranges from 1 to 1000 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input dryWetMix:(AUValue)dryWetMix gain:(AUValue)gain minDelayTime:(AUValue)minDelayTime maxDelayTime:(AUValue)maxDelayTime decayTimeAt0Hz:(AUValue)decayTimeAt0Hz decayTimeAtNyquist:(AUValue)decayTimeAtNyquist randomizeReflections:(AUValue)randomizeReflections OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AudioKit version of Apple‚Äôs Ring Modulator from the Distortion Audio Unit
SWIFT_CLASS("_TtC8AudioKit15AKRingModulator")
@interface AKRingModulator : AKNode
/// Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) AUValue frequency1;
/// Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
@property (nonatomic) AUValue frequency2;
/// Ring Mod Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
@property (nonatomic) AUValue balance;
/// Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
@property (nonatomic) AUValue mix;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic) BOOL isStarted;
/// Initialize the ring modulator node
/// \param input Input node to process
///
/// \param frequency1 Frequency1 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param frequency2 Frequency2 (Hertz) ranges from 0.5 to 8000 (Default: 100)
///
/// \param balance Balance (Normalized Value) ranges from 0 to 1 (Default: 0.5)
///
/// \param mix Mix (Normalized Value) ranges from 0 to 1 (Default: 1)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input frequency1:(AUValue)frequency1 frequency2:(AUValue)frequency2 balance:(AUValue)balance mix:(AUValue)mix OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// Emulation of the Roland TB-303 filter
SWIFT_CLASS("_TtC8AudioKit19AKRolandTB303Filter")
@interface AKRolandTB303Filter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit28AKRolandTB303FilterAudioUnit")
@interface AKRolandTB303FilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Sampler
SWIFT_CLASS("_TtC8AudioKit9AKSampler")
@interface AKSampler : AKPolyphonicNode
/// Voice LFO restart (boolean, 0.0 for false or 1.0 for true) - resets the phase of each voice lfo on keydown
@property (nonatomic) BOOL restartVoiceLFO;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end



SWIFT_CLASS("_TtC8AudioKit18AKSamplerAudioUnit")
@interface AKSamplerAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@property (nonatomic, readonly) BOOL canProcessInPlace;
@end


SWIFT_CLASS("_TtC8AudioKit26AKSequencerEngineAudioUnit")
@interface AKSequencerEngineAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Audio player that loads a sample into memory
SWIFT_CLASS("_TtC8AudioKit16AKSequencerTrack")
@interface AKSequencerTrack : AKNode
/// Initialize the track
- (nonnull instancetype)initWithTargetNode:(AKNode * _Nullable)targetNode OBJC_DESIGNATED_INITIALIZER;
@end

enum BufferLength : NSInteger;

/// Global settings for AudioKit
SWIFT_CLASS("_TtC8AudioKit10AKSettings")
@interface AKSettings : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AVAudioFormat * _Nonnull defaultAudioFormat;)
+ (AVAudioFormat * _Nonnull)defaultAudioFormat SWIFT_WARN_UNUSED_RESULT;
/// The sample rate in Hertz, default is 44100 kHz. Set a new audioFormat if you want to change this value.
/// See audioFormat. This is the format that is used for node connections.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double sampleRate;)
+ (double)sampleRate SWIFT_WARN_UNUSED_RESULT;
+ (void)setSampleRate:(double)newValue;
/// Number of audio channels: 2 for stereo, 1 for mono
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) uint32_t channelCount;)
+ (uint32_t)channelCount SWIFT_WARN_UNUSED_RESULT;
+ (void)setChannelCount:(uint32_t)newValue;
/// Whether we should be listening to audio input (microphone)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL audioInputEnabled;)
+ (BOOL)audioInputEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setAudioInputEnabled:(BOOL)value;
/// Global default rampDuration value
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double rampDuration;)
+ (double)rampDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setRampDuration:(double)value;
/// Allows AudioKit to send Notifications
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL notificationsEnabled;)
+ (BOOL)notificationsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setNotificationsEnabled:(BOOL)value;
/// AudioKit buffer length is set using AKSettings.bufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength bufferLength;)
+ (enum BufferLength)bufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setBufferLength:(enum BufferLength)value;
/// AudioKit recording buffer length is set using AKSettings.BufferLength
/// default is .VeryLong for a buffer set to 2 power 10 = 1024 samples (232 ms)
/// in Apple‚Äôs doc : ‚ÄúThe requested size of the incoming buffers. The implementation may choose another size.‚Äù
/// So setting this value may have no effect (depending on the hardware device ?)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum BufferLength recordingBufferLength;)
+ (enum BufferLength)recordingBufferLength SWIFT_WARN_UNUSED_RESULT;
+ (void)setRecordingBufferLength:(enum BufferLength)value;
/// If set to true, Recording will stop after some delay to compensate
/// latency between time recording is stopped and time it is written to file
/// If set to false (the default value) , stopping record will be immediate,
/// even if the last audio frames haven‚Äôt been recorded to file yet.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL fixTruncatedRecordings;)
+ (BOOL)fixTruncatedRecordings SWIFT_WARN_UNUSED_RESULT;
+ (void)setFixTruncatedRecordings:(BOOL)value;
/// Turn on or off AudioKit logging
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLogging;)
+ (BOOL)enableLogging SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLogging:(BOOL)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum of available buffer lengths
/// from Shortest: 2 power 5 samples (32 samples = 0.7 ms @ 44100 kz)
/// to Longest: 2 power 12 samples (4096 samples = 92.9 ms @ 44100 Hz)
typedef SWIFT_ENUM(NSInteger, BufferLength, open) {
/// Shortest: 32 samples = 0.7 ms @ 44100 kz
  BufferLengthShortest = 5,
/// Very Short: 64 samples
  BufferLengthVeryShort = 6,
/// Short: 128 samples
  BufferLengthShort = 7,
/// Medium: 256 samples
  BufferLengthMedium = 8,
/// Long: 512 samples
  BufferLengthLong = 9,
/// Very Long: 1024 samples
  BufferLengthVeryLong = 10,
/// Huge: 2048 samples
  BufferLengthHuge = 11,
/// Longest: 4096 samples = 92.9 ms @ 44100 Hz
  BufferLengthLongest = 12,
};

/// Constants for ramps used in AKParameterRamp.hpp, AKBooster, and others
typedef SWIFT_ENUM(NSInteger, RampType, open) {
  RampTypeLinear = 0,
  RampTypeExponential = 1,
  RampTypeLogarithmic = 2,
  RampTypeSCurve = 3,
};


@interface AKSettings (SWIFT_EXTENSION(AudioKit))
/// Global audio format AudioKit will default to for new objects and connections
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) AVAudioFormat * _Nonnull audioFormat;)
+ (AVAudioFormat * _Nonnull)audioFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setAudioFormat:(AVAudioFormat * _Nonnull)value;
/// The hardware ioBufferDuration. Setting this will request the new value, getting
/// will query the hardware.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) double ioBufferDuration;)
+ (double)ioBufferDuration SWIFT_WARN_UNUSED_RESULT;
+ (void)setIoBufferDuration:(double)newValue;
@end


/// AudioKit version of Apple‚Äôs SpeechSynthesis Audio Unit
SWIFT_CLASS("_TtC8AudioKit19AKSpeechSynthesizer")
@interface AKSpeechSynthesizer : AKNode
- (nonnull instancetype)initWithRate:(NSInteger)rate frequency:(NSInteger)frequency modulation:(NSInteger)modulation OBJC_DESIGNATED_INITIALIZER;
@end


/// Stereo delay-line with stereo (linked dual mono) and ping-pong modes
SWIFT_CLASS("_TtC8AudioKit13AKStereoDelay")
@interface AKStereoDelay : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit22AKStereoDelayAudioUnit")
@interface AKStereoDelayAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Stereo StereoFieldLimiter
SWIFT_CLASS("_TtC8AudioKit20AKStereoFieldLimiter")
@interface AKStereoFieldLimiter : AKNode
/// Limiting Factor
@property (nonatomic) double amount;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
@end


SWIFT_CLASS("_TtC8AudioKit29AKStereoFieldLimiterAudioUnit")
@interface AKStereoFieldLimiterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Audio from a standard stereo input (very useful for making filters that use Audiobus or IAA as their input source)
SWIFT_CLASS("_TtC8AudioKit13AKStereoInput")
@interface AKStereoInput : AKNode
/// Output Volume (Default 1)
@property (nonatomic) AUValue volume;
/// Determine if the microphone is currently on.
@property (nonatomic, readonly) BOOL isStarted;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// AKStringResonator passes the input through a network composed of comb,
/// low-pass and all-pass filters, similar to the one used in some versions of
/// the Karplus-Strong algorithm, creating a string resonator effect. The
/// fundamental frequency of the ‚Äústring‚Äù is controlled by the
/// fundamentalFrequency.  This operation can be used to simulate sympathetic
/// resonances to an input signal.
SWIFT_CLASS("_TtC8AudioKit17AKStringResonator")
@interface AKStringResonator : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit26AKStringResonatorAudioUnit")
@interface AKStringResonatorAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Synth
SWIFT_CLASS("_TtC8AudioKit7AKSynth")
@interface AKSynth : AKPolyphonicNode
/// Master volume (fraction)
@property (nonatomic) AUValue masterVolume;
/// Pitch offset (semitones)
@property (nonatomic) AUValue pitchBend;
/// Vibrato amount (semitones)
@property (nonatomic) AUValue vibratoDepth;
/// Filter cutoff (harmonic ratio)
@property (nonatomic) AUValue filterCutoff;
/// Filter EG strength (harmonic ratio)
@property (nonatomic) AUValue filterStrength;
/// Filter resonance (dB)
@property (nonatomic) AUValue filterResonance;
/// Amplitude attack duration (seconds)
@property (nonatomic) AUValue attackDuration;
/// Amplitude Decay duration (seconds)
@property (nonatomic) AUValue decayDuration;
/// Amplitude sustain level (fraction)
@property (nonatomic) AUValue sustainLevel;
/// Amplitude Release duration (seconds)
@property (nonatomic) AUValue releaseDuration;
/// Filter attack duration (seconds)
@property (nonatomic) AUValue filterAttackDuration;
/// Filter Decay duration (seconds)
@property (nonatomic) AUValue filterDecayDuration;
/// Filter sustain level (fraction)
@property (nonatomic) AUValue filterSustainLevel;
/// Filter Release duration (seconds)
@property (nonatomic) AUValue filterReleaseDuration;
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity frequency:(AUValue)frequency channel:(uint8_t)channel;
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


SWIFT_CLASS("_TtC8AudioKit16AKSynthAudioUnit")
@interface AKSynthAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Kick Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit11AKSynthKick")
@interface AKSynthKick : AKMIDIInstrument
/// Create the synth kick voice
/// \param midiInputName Name of the instrument‚Äôs MIDI input.
///
- (nonnull instancetype)initWithMidiInputName:(NSString * _Nullable)midiInputName OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end


/// Snare Drum Synthesizer Instrument
SWIFT_CLASS("_TtC8AudioKit12AKSynthSnare")
@interface AKSynthSnare : AKMIDIInstrument
/// Create the synth snare voice
- (nonnull instancetype)initWithDuration:(double)duration resonance:(double)resonance OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)playWithNoteNumber:(uint8_t)noteNumber velocity:(uint8_t)velocity channel:(uint8_t)channel;
/// Unneeded stop function since the sounds all decay quickly
- (void)stopWithNoteNumber:(uint8_t)noteNumber;
@end

enum AKTableType : NSInteger;

/// A table of values accessible as a waveform or lookup mechanism
SWIFT_CLASS("_TtC8AudioKit7AKTable")
@interface AKTable : NSObject
/// Initialize and set up the default table
/// \param type AKTableType of the new table
///
/// \param phase Phase offset
///
/// \param count Size of the table (multiple of 2)
///
- (nonnull instancetype)init:(enum AKTableType)type phase:(float)phase count:(NSInteger)count OBJC_DESIGNATED_INITIALIZER;
/// Create table from an array of Element
- (nonnull instancetype)init:(NSArray<NSNumber *> * _Nonnull)content phase:(float)phase OBJC_DESIGNATED_INITIALIZER;
/// Create table from audio file
- (nonnull instancetype)initWithFile:(AKAudioFile * _Nonnull)file;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Supported default table types
typedef SWIFT_ENUM(NSInteger, AKTableType, open) {
/// Standard sine waveform
  AKTableTypeSine = 0,
/// Standard triangle waveform
  AKTableTypeTriangle = 1,
/// Standard square waveform
  AKTableTypeSquare = 2,
/// Standard sawtooth waveform
  AKTableTypeSawtooth = 3,
/// Reversed sawtooth waveform
  AKTableTypeReverseSawtooth = 4,
/// Sine wave from 0-1
  AKTableTypePositiveSine = 5,
/// Triangle waveform from 0-1
  AKTableTypePositiveTriangle = 6,
/// Square waveform from 0-1
  AKTableTypePositiveSquare = 7,
/// Sawtooth waveform from 0-1
  AKTableTypePositiveSawtooth = 8,
/// Reversed sawtooth waveform from 0-1
  AKTableTypePositiveReverseSawtooth = 9,
/// Zeros
  AKTableTypeZero = 10,
/// Custom waveform
  AKTableTypeCustom = 11,
};


/// Distortion using a modified hyperbolic tangent function.
SWIFT_CLASS("_TtC8AudioKit16AKTanhDistortion")
@interface AKTanhDistortion : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit25AKTanhDistortionAudioUnit")
@interface AKTanhDistortionAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Testing node
SWIFT_CLASS("_TtC8AudioKit8AKTester")
@interface AKTester : AKNode
/// Flag on whether or not the test is still in progress
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this test node
/// \param input AKNode to test
///
/// \param samples Number of samples to produce
///
- (nonnull instancetype)init:(AKNode * _Nullable)input samples:(NSInteger)samples OBJC_DESIGNATED_INITIALIZER;
@end


/// 3-pole (18 db/oct slope) Low-Pass filter with resonance and tanh distortion.
SWIFT_CLASS("_TtC8AudioKit24AKThreePoleLowpassFilter")
@interface AKThreePoleLowpassFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit33AKThreePoleLowpassFilterAudioUnit")
@interface AKThreePoleLowpassFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AudioKit version of Apple‚Äôs TimePitch Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKTimePitch")
@interface AKTimePitch : AKNode
/// Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
@property (nonatomic) AUValue rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Pitch (Cents) ranges from -2400 to 2400 (Default: 0.0)
@property (nonatomic) AUValue pitch;
/// Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
@property (nonatomic) AUValue overlap;
/// Initialize the time pitch node
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.03125 to 32.0 (Default: 1.0)
///
/// \param pitch Pitch (Cents) ranges from -2400 to 2400 (Default: 0.0)
///
/// \param overlap Overlap (generic) ranges from 3.0 to 32.0 (Default: 8.0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input rate:(AUValue)rate pitch:(AUValue)pitch overlap:(AUValue)overlap OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end



/// A complement to the AKLowPassFilter.
SWIFT_CLASS("_TtC8AudioKit22AKToneComplementFilter")
@interface AKToneComplementFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit31AKToneComplementFilterAudioUnit")
@interface AKToneComplementFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// A first-order recursive low-pass filter with variable frequency response.
SWIFT_CLASS("_TtC8AudioKit12AKToneFilter")
@interface AKToneFilter : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKToneFilterAudioUnit")
@interface AKToneFilterAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Table-lookup tremolo with linear interpolation
SWIFT_CLASS("_TtC8AudioKit9AKTremolo")
@interface AKTremolo : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit18AKTremoloAudioUnit")
@interface AKTremoloAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// AKTuningTableBase provides low-level methods for creating
/// arbitrary mappings of midi note numbers to musical frequencies
/// The default behavior is ‚Äú12-tone equal temperament‚Äù so
/// we can integrate in non-microtonal settings with backwards compatibility
SWIFT_CLASS("_TtC8AudioKit17AKTuningTableBase")
@interface AKTuningTableBase : NSObject
/// Total number of MIDI Notes available to play
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger midiNoteCount;)
+ (NSInteger)midiNoteCount SWIFT_WARN_UNUSED_RESULT;
/// Initialization for standard default 12 tone equal temperament
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Notes Per Octave: The count of the frequency array
/// Defaults to 12 for the base class‚Ä¶should be overridden by subclasses
@property (nonatomic, readonly) NSInteger npo;
/// Return the Frequency for the given MIDINoteNumber
- (double)frequencyForNoteNumber:(uint8_t)noteNumber SWIFT_WARN_UNUSED_RESULT;
/// Set frequency of a given note number
- (void)setFrequency:(double)frequency at:(uint8_t)noteNumber;
@end

@class AKTuningTableETNN;
@class AKTuningTableDelta12ET;

SWIFT_CLASS("_TtC8AudioKit13AKTuningTable")
@interface AKTuningTable : AKTuningTableBase
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull masterSet;
/// Note number for standard reference note
@property (nonatomic) uint8_t middleCNoteNumber;
/// Frequency of standard reference note
/// equivalent to noteToHz: return 440. * exp2((60 - 69)/12.)
@property (nonatomic) double middleCFrequency;
/// Octave number for standard reference note.  Can be negative
/// ‚Ä¶, -2, -1, 0, 1, 2, ‚Ä¶
@property (nonatomic) NSInteger middleCOctave;
/// Range of downwards Pitch Bend used in etNN calculation.  Must match your synthesizer‚Äôs pitch bend DOWN range
/// etNNPitchBendRangeDown and etNNPitchBendRangeUp must cover a spread that is
/// greater than the maximum distance between two notes in your octave.
@property (nonatomic) double etNNPitchBendRangeDown;
/// Range of upwards Pitch Bend used in etNN calculation.  Must match your synthesizer‚Äôs pitch bend UP range
/// etNNPitchBendRangeDown and etNNPitchBendRangeUp must cover a spread that is
/// greater than the maximum distance between two notes in your octave.
@property (nonatomic) double etNNPitchBendRangeUp;
/// Given the tuning table‚Äôs MIDINoteNumber NN return an AKTuningTableETNN
/// of the equivalent 12ET MIDINoteNumber plus Pitch Bend
/// Returns nil if the tuning table‚Äôs MIDINoteNumber cannot be mapped to 12ET
/// \param nn The tuning table‚Äôs Note Number
///
- (AKTuningTableETNN * _Nullable)etNNPitchBendWithNN:(uint8_t)nn SWIFT_WARN_UNUSED_RESULT;
/// Given the tuning table‚Äôs MIDINoteNumber NN return an
/// AKTuningTableETNN of the equivalent 12ET MIDINoteNumber plus Pitch Bend
/// Returns nil if the tuning table‚Äôs MIDINoteNumber cannot be mapped to 12ET
/// \param nn The tuning table‚Äôs Note Number
///
- (AKTuningTableDelta12ET * _Nullable)delta12ETWithNN:(uint8_t)nn SWIFT_WARN_UNUSED_RESULT;
/// Notes Per Octave: The count of the masterSet array
@property (nonatomic, readonly) NSInteger npo;
/// Initialization for standard default 12 tone equal temperament
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Create the tuning using the input masterSet
/// \param inputMasterSet An array of frequencies, i.e., the ‚ÄúmasterSet‚Äù
///
- (NSInteger)tuningTableFromFrequencies:(NSArray<NSNumber *> * _Nonnull)inputMasterSet;
/// Create the tuning based on deviations from 12ET by an array of cents
/// \param centsArray An array of 12 Cents.
/// 12ET will be modified by the centsArray, including deviations which result in a root less than 1.0
///
- (void)tuning12ETDeviationWithCentsArray:(NSArray<NSNumber *> * _Nonnull)centsArray;
/// Renders and returns the masterSet values as an array of cents
- (NSArray<NSNumber *> * _Nonnull)masterSetInCents SWIFT_WARN_UNUSED_RESULT;
@end



@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Creates a ‚ÄúNested 2-interval pattern‚Äù, or ‚ÄúMoment of Symmetry‚Äù
/// From Erv Wilson.  See http://anaphoria.com/wilsonintroMOS.html
/// \param gInput A Double on [0, 1]
///
/// \param lInput An Int on [0, 7]
///
/// \param mInput The mode of the scale‚Ä¶degrees are normalized by the frequency at this index
///
///
/// returns:
/// Number of notes per octave
- (NSInteger)momentOfSymmetryWithGenerator:(double)gInput level:(NSInteger)lInput murchana:(NSInteger)mInput SWIFT_WARN_UNUSED_RESULT;
@end


@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetHighlandBagPipes SWIFT_WARN_UNUSED_RESULT;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetDiaphonicTetrachord SWIFT_WARN_UNUSED_RESULT;
@end



@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Create a hexany from 4 frequencies (4 choose 2)
/// From Erv Wilson.  See http://anaphoria.com/dal.pdf and http://anaphoria.com/hexany.pdf
/// \param A First of the master set of frequencies
///
/// \param B Second of the master set of frequencies
///
/// \param C Third of the master set of frequencies
///
/// \param D Fourth of the master set of frequencies
///
- (NSInteger)hexany:(double)A :(double)B :(double)C :(double)D;
/// Create a major tetrany from 4 frequencies (4 choose 1)
/// \param A First of the master set of frequencies
///
/// \param B Second of the master set of frequencies
///
/// \param C Third of the master set of frequencies
///
/// \param D Fourth of the master set of frequencies
///
- (NSInteger)majorTetrany:(double)A :(double)B :(double)C :(double)D;
/// Create a hexany from 4 frequencies (4 choose 3)
/// \param A First of the master set of frequencies
///
/// \param B Second of the master set of frequencies
///
/// \param C Third of the master set of frequencies
///
/// \param D Fourth of the master set of frequencies
///
- (NSInteger)minorTetrany:(double)A :(double)B :(double)C :(double)D;
@end



@interface AKTuningTable (SWIFT_EXTENSION(AudioKit))
/// Set tuning to 22 Indian Scale.
/// From Erv Wilson.  See http://anaphoria.com/Khiasmos.pdf
- (NSInteger)khiasmos22Indian;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian00_17;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian01Kalyan;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian02Bilawal;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian03Khamaj;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian04KafiOld;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian05Kafi;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian06Asawari;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian07Bhairavi;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian08Marwa;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian09Purvi;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian10Lalit2;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian11Todi;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian12Lalit;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian13NoName;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian14AnandBhairav;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian15Bhairav;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian16JogiyaTodi;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian17Madhubanti;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian18NatBhairav;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian19AhirBhairav;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian20ChandraKanada;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian21BasantMukhari;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian22Champakali;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian23Patdeep;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian24MohanKauns;
/// From Erv Wilson.  See http://anaphoria.com/genus.pdf
- (NSInteger)presetPersian17NorthIndian25Parameswari;
@end



/// helper object to simulate a Swift tuple for ObjC interoperability
SWIFT_CLASS("_TtC8AudioKit22AKTuningTableDelta12ET")
@interface AKTuningTableDelta12ET : NSObject
@property (nonatomic) uint8_t nn;
@property (nonatomic) double cents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// helper object to simulate a Swift tuple for ObjC interoperability
SWIFT_CLASS("_TtC8AudioKit17AKTuningTableETNN")
@interface AKTuningTableETNN : NSObject
@property (nonatomic) uint8_t nn;
@property (nonatomic) NSInteger pitchBend;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// AudioKit version of Apple‚Äôs VariSpeed Audio Unit
SWIFT_CLASS("_TtC8AudioKit11AKVariSpeed")
@interface AKVariSpeed : AKNode
/// Rate (rate) ranges form 0.25 to 4.0 (Default: 1.0)
@property (nonatomic) AUValue rate;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize the varispeed node
/// \param input Input node to process
///
/// \param rate Rate (rate) ranges from 0.25 to 4.0 (Default: 1.0)
///
- (nonnull instancetype)init:(AKNode * _Nullable)input rate:(AUValue)rate OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// A delay line with cubic interpolation.
SWIFT_CLASS("_TtC8AudioKit15AKVariableDelay")
@interface AKVariableDelay : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit24AKVariableDelayAudioUnit")
@interface AKVariableDelayAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Based on the Pink Trombone algorithm by Neil Thapen, this implements a
/// physical model of the vocal tract glottal pulse wave. The tract model is
/// based on the classic Kelly-Lochbaum segmented cylindrical 1d waveguide
/// model, and the glottal pulse wave is a LF glottal pulse model.
SWIFT_CLASS("_TtC8AudioKit12AKVocalTract")
@interface AKVocalTract : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKVocalTractAudioUnit")
@interface AKVocalTractAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// Audio player that loads a sample into memory
SWIFT_CLASS("_TtC8AudioKit11AKWaveTable")
@interface AKWaveTable : AKNode
/// Ramp Duration represents the speed at which parameters are allowed to change
@property (nonatomic) double rampDuration;
/// startPoint in samples - where to start playing the sample from
@property (nonatomic) uint32_t startPoint;
/// endPoint - this is where the sample will play to before stopping.
/// A value less than the start point will play the sample backwards.
@property (nonatomic) uint32_t endPoint;
/// loopStartPoint in samples - where to start playing the sample from
@property (nonatomic) uint32_t loopStartPoint;
/// loopEndPoint - this is where the sample will play to before stopping.
@property (nonatomic) uint32_t loopEndPoint;
/// playback rate - A value of 1 is normal, 2 is double speed, 0.5 is halfspeed, etc.
@property (nonatomic) AUValue rate;
/// Volume - amplitude adjustment
@property (nonatomic) AUValue volume;
/// Loop Enabled - if enabled, the sample will loop back to the startpoint when the endpoint is reached.
/// When disabled, the sample will play through once from startPoint to endPoint
@property (nonatomic) BOOL loopEnabled;
/// Tells whether the node is processing (ie. started, playing, or active)
@property (nonatomic, readonly) BOOL isStarted;
/// Initialize this WaveTable node
/// \param file Initial file to load (defining maximum size unless maximum samples are also set
///
/// \param startPoint Point in samples from which to start playback
///
/// \param endPoint Point in samples at which to stop playback
///
/// \param rate Multiplication factor from original speed (Default: 1)
///
/// \param volume Multiplication factor of the overall amplitude (Default: 1)
///
/// \param maximumSamples Largest number of samples that will be loaded into the sample player
///
/// \param completionHandler Callback to run when the sample playback is completed
///
- (nonnull instancetype)initWithFile:(AKAudioFile * _Nullable)file startPoint:(uint32_t)startPoint endPoint:(uint32_t)endPoint rate:(AUValue)rate volume:(AUValue)volume maximumSamples:(uint32_t)maximumSamples completionHandler:(void (^ _Nonnull)(void))completionHandler loadCompletionHandler:(void (^ _Nonnull)(void))loadCompletionHandler OBJC_DESIGNATED_INITIALIZER;
/// Function to start, play, or activate the node, all do the same thing
- (void)start;
/// Function to stop or bypass the node, both are equivalent
- (void)stop;
@end


/// White noise generator
SWIFT_CLASS("_TtC8AudioKit12AKWhiteNoise")
@interface AKWhiteNoise : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKWhiteNoiseAudioUnit")
@interface AKWhiteNoiseAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end


/// 8 FDN stereo zitareverb algorithm, imported from Faust.
SWIFT_CLASS("_TtC8AudioKit12AKZitaReverb")
@interface AKZitaReverb : AKNode
@end


SWIFT_CLASS("_TtC8AudioKit21AKZitaReverbAudioUnit")
@interface AKZitaReverbAudioUnit : AKAudioUnitBase
- (nullable instancetype)initWithComponentDescription:(AudioComponentDescription)componentDescription options:(AudioComponentInstantiationOptions)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
@end







@interface AVAudioFile (SWIFT_EXTENSION(AudioKit))
/// The number of samples can be accessed by .length property,
/// but samplesCount has a less ambiguous meaning
@property (nonatomic, readonly) uint32_t samplesCount;
/// strange that sampleRate is a Double and not an Integer
@property (nonatomic, readonly) double sampleRate;
/// Number of channels, 1 for mono, 2 for stereo
@property (nonatomic, readonly) uint32_t channelCount;
/// Duration in seconds
@property (nonatomic, readonly) double duration;
/// true if Audio Samples are interleaved
@property (nonatomic, readonly) BOOL interleaved;
/// true only if file format is ‚Äúdeinterleaved native-endian float (AVAudioPCMFormatFloat32)‚Äù
@property (nonatomic, readonly) BOOL standard;
/// Human-readable version of common format
@property (nonatomic, readonly, copy) NSString * _Nonnull commonFormatString;
/// the directory path as a URL object
@property (nonatomic, readonly, copy) NSURL * _Nonnull directoryPath;
/// the file name with extension as a String
@property (nonatomic, readonly, copy) NSString * _Nonnull fileNamePlusExtension;
/// the file name without extension as a String
@property (nonatomic, readonly, copy) NSString * _Nonnull fileName;
/// the file extension as a String (without ‚Äú.‚Äù)
@property (nonatomic, readonly, copy) NSString * _Nonnull fileExt;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// returns file Mime Type if exists
/// Otherwise, returns nil
/// (useful when sending an AKAudioFile by email)
@property (nonatomic, readonly, copy) NSString * _Nullable mimeType;
/// Static function to delete all audiofiles from Temp directory
/// AKAudioFile.cleanTempDirectory()
+ (void)cleanTempDirectory;
@end



@interface AVAudioNode (SWIFT_EXTENSION(AudioKit)) <AKOutput>
@property (nonatomic, readonly, strong) AVAudioNode * _Nonnull outputNode;
@end








#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
